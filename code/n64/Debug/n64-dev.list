
n64-dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  0800355c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800355c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eb1  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af1  00000000  00000000  00028f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013253  00000000  00000000  0002b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6a8  00000000  00000000  0003ea13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b2da  00000000  00000000  000490bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e94  00000000  00000000  000b43e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003384 	.word	0x08003384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003384 	.word	0x08003384

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	240c      	movs	r4, #12
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	2314      	movs	r3, #20
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f002 f8bd 	bl	80023c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <MX_GPIO_Init+0xf0>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b35      	ldr	r3, [pc, #212]	; (8000324 <MX_GPIO_Init+0xf0>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0289      	lsls	r1, r1, #10
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b32      	ldr	r3, [pc, #200]	; (8000324 <MX_GPIO_Init+0xf0>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	029b      	lsls	r3, r3, #10
 8000260:	4013      	ands	r3, r2
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000266:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <MX_GPIO_Init+0xf0>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <MX_GPIO_Init+0xf0>)
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	0309      	lsls	r1, r1, #12
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <MX_GPIO_Init+0xf0>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	031b      	lsls	r3, r3, #12
 800027c:	4013      	ands	r3, r2
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, blue_LED_Pin|green_LED_Pin, GPIO_PIN_RESET);
 8000282:	23c0      	movs	r3, #192	; 0xc0
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4828      	ldr	r0, [pc, #160]	; (8000328 <MX_GPIO_Init+0xf4>)
 8000288:	2200      	movs	r2, #0
 800028a:	0019      	movs	r1, r3
 800028c:	f000 fe9d 	bl	8000fca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = xA_pin_Pin|yA_pin_Pin;
 8000290:	193b      	adds	r3, r7, r4
 8000292:	2205      	movs	r2, #5
 8000294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000296:	193b      	adds	r3, r7, r4
 8000298:	22c4      	movs	r2, #196	; 0xc4
 800029a:	0392      	lsls	r2, r2, #14
 800029c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a4:	193a      	adds	r2, r7, r4
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fcff 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = xB_pin_Pin|yB_pin_Pin;
 80002b2:	193b      	adds	r3, r7, r4
 80002b4:	220a      	movs	r2, #10
 80002b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	193b      	adds	r3, r7, r4
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	193a      	adds	r2, r7, r4
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	0011      	movs	r1, r2
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fcef 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = blue_LED_Pin|green_LED_Pin;
 80002d2:	0021      	movs	r1, r4
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	22c0      	movs	r2, #192	; 0xc0
 80002d8:	0092      	lsls	r2, r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <MX_GPIO_Init+0xf4>)
 80002f2:	0019      	movs	r1, r3
 80002f4:	0010      	movs	r0, r2
 80002f6:	f000 fcdb 	bl	8000cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2100      	movs	r1, #0
 80002fe:	2005      	movs	r0, #5
 8000300:	f000 fca4 	bl	8000c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000304:	2005      	movs	r0, #5
 8000306:	f000 fcb6 	bl	8000c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	2006      	movs	r0, #6
 8000310:	f000 fc9c 	bl	8000c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000314:	2006      	movs	r0, #6
 8000316:	f000 fcae 	bl	8000c76 <HAL_NVIC_EnableIRQ>

}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b009      	add	sp, #36	; 0x24
 8000320:	bd90      	pop	{r4, r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	40021000 	.word	0x40021000
 8000328:	48000800 	.word	0x48000800

0800032c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 fb7b 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f8b9 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f7ff ff7b 	bl	8000234 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800033e:	f000 fa6b 	bl	8000818 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GPIO_PinState prev_xA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 8000342:	230f      	movs	r3, #15
 8000344:	18fc      	adds	r4, r7, r3
 8000346:	2390      	movs	r3, #144	; 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2101      	movs	r1, #1
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fe1f 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000352:	0003      	movs	r3, r0
 8000354:	7023      	strb	r3, [r4, #0]
  GPIO_PinState prev_yA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 8000356:	230e      	movs	r3, #14
 8000358:	18fc      	adds	r4, r7, r3
 800035a:	2390      	movs	r3, #144	; 0x90
 800035c:	05db      	lsls	r3, r3, #23
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fe15 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000366:	0003      	movs	r3, r0
 8000368:	7023      	strb	r3, [r4, #0]
  GPIO_PinState curr_xA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 800036a:	230d      	movs	r3, #13
 800036c:	18fc      	adds	r4, r7, r3
 800036e:	2390      	movs	r3, #144	; 0x90
 8000370:	05db      	lsls	r3, r3, #23
 8000372:	2101      	movs	r1, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fe0b 	bl	8000f90 <HAL_GPIO_ReadPin>
 800037a:	0003      	movs	r3, r0
 800037c:	7023      	strb	r3, [r4, #0]
  GPIO_PinState curr_yA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 800037e:	230c      	movs	r3, #12
 8000380:	18fc      	adds	r4, r7, r3
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	2101      	movs	r1, #1
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fe01 	bl	8000f90 <HAL_GPIO_ReadPin>
 800038e:	0003      	movs	r3, r0
 8000390:	7023      	strb	r3, [r4, #0]
  uint8_t send_data[] = {1, 1, 2, 2, 3, 3, 4, 4};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4a41      	ldr	r2, [pc, #260]	; (800049c <main+0x170>)
 8000396:	ca03      	ldmia	r2!, {r0, r1}
 8000398:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* If not testing, comment out following code*/
  n64_loop();
 800039a:	f000 f967 	bl	800066c <n64_loop>
  uart_testing();
 800039e:	f000 faf9 	bl	8000994 <uart_testing>

  /* This concludes testing code*/

  while (1)
  {
    curr_xA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 80003a2:	250d      	movs	r5, #13
 80003a4:	197c      	adds	r4, r7, r5
 80003a6:	2390      	movs	r3, #144	; 0x90
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2101      	movs	r1, #1
 80003ac:	0018      	movs	r0, r3
 80003ae:	f000 fdef 	bl	8000f90 <HAL_GPIO_ReadPin>
 80003b2:	0003      	movs	r3, r0
 80003b4:	7023      	strb	r3, [r4, #0]
    if (curr_xA != prev_xA)
 80003b6:	002c      	movs	r4, r5
 80003b8:	193a      	adds	r2, r7, r4
 80003ba:	230f      	movs	r3, #15
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	7812      	ldrb	r2, [r2, #0]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d01a      	beq.n	80003fc <main+0xd0>
    {
      if (HAL_GPIO_ReadPin(xB_pin_GPIO_Port, xB_pin_Pin) == curr_xA)
 80003c6:	2390      	movs	r3, #144	; 0x90
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2102      	movs	r1, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 fddf 	bl	8000f90 <HAL_GPIO_ReadPin>
 80003d2:	0003      	movs	r3, r0
 80003d4:	001a      	movs	r2, r3
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	4293      	cmp	r3, r2
 80003dc:	d107      	bne.n	80003ee <main+0xc2>
      {
        HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_SET);
 80003de:	2380      	movs	r3, #128	; 0x80
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	482f      	ldr	r0, [pc, #188]	; (80004a0 <main+0x174>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0019      	movs	r1, r3
 80003e8:	f000 fdef 	bl	8000fca <HAL_GPIO_WritePin>
 80003ec:	e006      	b.n	80003fc <main+0xd0>
      }
      else
      {
        HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	482b      	ldr	r0, [pc, #172]	; (80004a0 <main+0x174>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	0019      	movs	r1, r3
 80003f8:	f000 fde7 	bl	8000fca <HAL_GPIO_WritePin>
      }
    }
    curr_yA = HAL_GPIO_ReadPin(yA_pin_GPIO_Port, yA_pin_Pin);
 80003fc:	250c      	movs	r5, #12
 80003fe:	197c      	adds	r4, r7, r5
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2104      	movs	r1, #4
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fdc2 	bl	8000f90 <HAL_GPIO_ReadPin>
 800040c:	0003      	movs	r3, r0
 800040e:	7023      	strb	r3, [r4, #0]
    if (curr_yA != prev_yA)
 8000410:	002c      	movs	r4, r5
 8000412:	193a      	adds	r2, r7, r4
 8000414:	230e      	movs	r3, #14
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	429a      	cmp	r2, r3
 800041e:	d01a      	beq.n	8000456 <main+0x12a>
    {
      if (HAL_GPIO_ReadPin(yB_pin_GPIO_Port, yB_pin_Pin) == curr_yA)
 8000420:	2390      	movs	r3, #144	; 0x90
 8000422:	05db      	lsls	r3, r3, #23
 8000424:	2108      	movs	r1, #8
 8000426:	0018      	movs	r0, r3
 8000428:	f000 fdb2 	bl	8000f90 <HAL_GPIO_ReadPin>
 800042c:	0003      	movs	r3, r0
 800042e:	001a      	movs	r2, r3
 8000430:	193b      	adds	r3, r7, r4
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4293      	cmp	r3, r2
 8000436:	d107      	bne.n	8000448 <main+0x11c>
      {
        HAL_GPIO_WritePin(green_LED_GPIO_Port, green_LED_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4818      	ldr	r0, [pc, #96]	; (80004a0 <main+0x174>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f000 fdc2 	bl	8000fca <HAL_GPIO_WritePin>
 8000446:	e006      	b.n	8000456 <main+0x12a>
      }
      else
      {
        HAL_GPIO_WritePin(green_LED_GPIO_Port, green_LED_Pin, GPIO_PIN_RESET);
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <main+0x174>)
 800044e:	2200      	movs	r2, #0
 8000450:	0019      	movs	r1, r3
 8000452:	f000 fdba 	bl	8000fca <HAL_GPIO_WritePin>
      }
    }
    send_data[1] = curr_xA;
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	210d      	movs	r1, #13
 800045a:	187a      	adds	r2, r7, r1
 800045c:	7812      	ldrb	r2, [r2, #0]
 800045e:	705a      	strb	r2, [r3, #1]
    send_data[3] = prev_xA;
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	200f      	movs	r0, #15
 8000464:	183a      	adds	r2, r7, r0
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	70da      	strb	r2, [r3, #3]
    send_data[5] = curr_yA;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	240c      	movs	r4, #12
 800046e:	193a      	adds	r2, r7, r4
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	715a      	strb	r2, [r3, #5]
    send_data[7] = prev_yA;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	250e      	movs	r5, #14
 8000478:	197a      	adds	r2, r7, r5
 800047a:	7812      	ldrb	r2, [r2, #0]
 800047c:	71da      	strb	r2, [r3, #7]
    prev_xA = curr_xA;
 800047e:	183b      	adds	r3, r7, r0
 8000480:	187a      	adds	r2, r7, r1
 8000482:	7812      	ldrb	r2, [r2, #0]
 8000484:	701a      	strb	r2, [r3, #0]
    prev_yA = curr_yA;
 8000486:	197b      	adds	r3, r7, r5
 8000488:	193a      	adds	r2, r7, r4
 800048a:	7812      	ldrb	r2, [r2, #0]
 800048c:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(&huart1, send_data, 8, 10000);
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <main+0x178>)
 8000490:	1d39      	adds	r1, r7, #4
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <main+0x17c>)
 8000494:	2208      	movs	r2, #8
 8000496:	f001 fb61 	bl	8001b5c <HAL_UART_Transmit>
    curr_xA = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 800049a:	e782      	b.n	80003a2 <main+0x76>
 800049c:	0800339c 	.word	0x0800339c
 80004a0:	48000800 	.word	0x48000800
 80004a4:	00002710 	.word	0x00002710
 80004a8:	20000094 	.word	0x20000094

080004ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b097      	sub	sp, #92	; 0x5c
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	2428      	movs	r4, #40	; 0x28
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2330      	movs	r3, #48	; 0x30
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f001 ff81 	bl	80023c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2310      	movs	r3, #16
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f001 ff79 	bl	80023c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f001 ff72 	bl	80023c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	0021      	movs	r1, r4
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2210      	movs	r2, #16
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	22a0      	movs	r2, #160	; 0xa0
 8000504:	0392      	lsls	r2, r2, #14
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050e:	187b      	adds	r3, r7, r1
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fd93 	bl	800103c <HAL_RCC_OscConfig>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800051a:	f000 f828 	bl	800056e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800051e:	2118      	movs	r1, #24
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2207      	movs	r2, #7
 8000524:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2101      	movs	r1, #1
 800053c:	0018      	movs	r0, r3
 800053e:	f001 f897 	bl	8001670 <HAL_RCC_ClockConfig>
 8000542:	1e03      	subs	r3, r0, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000546:	f000 f812 	bl	800056e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2201      	movs	r2, #1
 800054e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f9cd 	bl	80018f8 <HAL_RCCEx_PeriphCLKConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000562:	f000 f804 	bl	800056e <Error_Handler>
  }
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b017      	add	sp, #92	; 0x5c
 800056c:	bd90      	pop	{r4, r7, pc}

0800056e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000572:	b672      	cpsid	i
}
 8000574:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x8>

08000578 <HAL_GPIO_EXTI_Callback>:

uint8_t x_pos = 0;
uint8_t y_pos = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == xA_pin_Pin)
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d126      	bne.n	80005da <HAL_GPIO_EXTI_Callback+0x62>
    {
        uint8_t xa_val = HAL_GPIO_ReadPin(xA_pin_GPIO_Port, xA_pin_Pin);
 800058c:	250f      	movs	r5, #15
 800058e:	197c      	adds	r4, r7, r5
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2101      	movs	r1, #1
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fcfa 	bl	8000f90 <HAL_GPIO_ReadPin>
 800059c:	0003      	movs	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
        uint8_t xb_val = HAL_GPIO_ReadPin(xB_pin_GPIO_Port, xB_pin_Pin);
 80005a0:	260e      	movs	r6, #14
 80005a2:	19bc      	adds	r4, r7, r6
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	2102      	movs	r1, #2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fcf0 	bl	8000f90 <HAL_GPIO_ReadPin>
 80005b0:	0003      	movs	r3, r0
 80005b2:	7023      	strb	r3, [r4, #0]
        if (xa_val != xb_val)
 80005b4:	197a      	adds	r2, r7, r5
 80005b6:	19bb      	adds	r3, r7, r6
 80005b8:	7812      	ldrb	r2, [r2, #0]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d006      	beq.n	80005ce <HAL_GPIO_EXTI_Callback+0x56>
            x_pos++;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e005      	b.n	80005da <HAL_GPIO_EXTI_Callback+0x62>
        else
            x_pos--;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_GPIO_EXTI_Callback+0xc0>)
 80005d8:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == yA_pin_Pin)
 80005da:	1dbb      	adds	r3, r7, #6
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d126      	bne.n	8000630 <HAL_GPIO_EXTI_Callback+0xb8>
    {
        uint8_t ya_val = HAL_GPIO_ReadPin(yA_pin_GPIO_Port, yA_pin_Pin);
 80005e2:	250d      	movs	r5, #13
 80005e4:	197c      	adds	r4, r7, r5
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	2104      	movs	r1, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fccf 	bl	8000f90 <HAL_GPIO_ReadPin>
 80005f2:	0003      	movs	r3, r0
 80005f4:	7023      	strb	r3, [r4, #0]
        uint8_t yb_val = HAL_GPIO_ReadPin(yB_pin_GPIO_Port, yB_pin_Pin);
 80005f6:	260c      	movs	r6, #12
 80005f8:	19bc      	adds	r4, r7, r6
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2108      	movs	r1, #8
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fcc5 	bl	8000f90 <HAL_GPIO_ReadPin>
 8000606:	0003      	movs	r3, r0
 8000608:	7023      	strb	r3, [r4, #0]
        if (ya_val != yb_val)
 800060a:	197a      	adds	r2, r7, r5
 800060c:	19bb      	adds	r3, r7, r6
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d006      	beq.n	8000624 <HAL_GPIO_EXTI_Callback+0xac>
            y_pos++;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000620:	701a      	strb	r2, [r3, #0]
        else
            y_pos--;
    }
}
 8000622:	e005      	b.n	8000630 <HAL_GPIO_EXTI_Callback+0xb8>
            y_pos--;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_GPIO_EXTI_Callback+0xc4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <HAL_GPIO_EXTI_Callback+0xc4>)
 800062e:	701a      	strb	r2, [r3, #0]
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b005      	add	sp, #20
 8000636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000638:	2000008c 	.word	0x2000008c
 800063c:	2000008d 	.word	0x2000008d

08000640 <write_coords>:

void write_coords()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    printf("X pos is %d, and Y pos is %d\r\n", x_pos, y_pos);
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <write_coords+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	0019      	movs	r1, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <write_coords+0x24>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	001a      	movs	r2, r3
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <write_coords+0x28>)
 8000652:	0018      	movs	r0, r3
 8000654:	f001 febe 	bl	80023d4 <iprintf>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	2000008c 	.word	0x2000008c
 8000664:	2000008d 	.word	0x2000008d
 8000668:	080033a4 	.word	0x080033a4

0800066c <n64_loop>:

void n64_loop()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    while (1)
    {
        write_coords();
 8000670:	f7ff ffe6 	bl	8000640 <write_coords>
 8000674:	e7fc      	b.n	8000670 <n64_loop+0x4>
	...

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	699a      	ldr	r2, [r3, #24]
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	619a      	str	r2, [r3, #24]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	69da      	ldr	r2, [r3, #28]
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0549      	lsls	r1, r1, #21
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_MspInit+0x44>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	055b      	lsls	r3, r3, #21
 80006ac:	4013      	ands	r3, r2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40021000 	.word	0x40021000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <NMI_Handler+0x4>

080006c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ca:	e7fe      	b.n	80006ca <HardFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f9ea 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(xA_pin_Pin);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fc86 	bl	8001004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(yA_pin_Pin);
 8000702:	2004      	movs	r0, #4
 8000704:	f000 fc7e 	bl	8001004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e00a      	b.n	8000736 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000720:	e000      	b.n	8000724 <_read+0x16>
 8000722:	bf00      	nop
 8000724:	0001      	movs	r1, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	60ba      	str	r2, [r7, #8]
 800072c:	b2ca      	uxtb	r2, r1
 800072e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	3301      	adds	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	429a      	cmp	r2, r3
 800073c:	dbf0      	blt.n	8000720 <_read+0x12>
	}

return len;
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b006      	add	sp, #24
 8000746:	bd80      	pop	{r7, pc}

08000748 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	return -1;
 8000750:	2301      	movs	r3, #1
 8000752:	425b      	negs	r3, r3
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	b002      	add	sp, #8
 800075a:	bd80      	pop	{r7, pc}

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0192      	lsls	r2, r2, #6
 800076c:	605a      	str	r2, [r3, #4]
	return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <_isatty>:

int _isatty(int file)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	return 1;
 8000780:	2301      	movs	r3, #1
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}

0800078a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
	return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b004      	add	sp, #16
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a8:	4a14      	ldr	r2, [pc, #80]	; (80007fc <_sbrk+0x5c>)
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <_sbrk+0x60>)
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d102      	bne.n	80007c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <_sbrk+0x64>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <_sbrk+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <_sbrk+0x64>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	693a      	ldr	r2, [r7, #16]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d207      	bcs.n	80007e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d0:	f001 fdce 	bl	8002370 <__errno>
 80007d4:	0003      	movs	r3, r0
 80007d6:	220c      	movs	r2, #12
 80007d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	e009      	b.n	80007f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	18d2      	adds	r2, r2, r3
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <_sbrk+0x64>)
 80007f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b006      	add	sp, #24
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20002000 	.word	0x20002000
 8000800:	00000400 	.word	0x00000400
 8000804:	20000090 	.word	0x20000090
 8000808:	20000130 	.word	0x20000130

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_USART1_UART_Init+0x60>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000824:	22e1      	movs	r2, #225	; 0xe1
 8000826:	0252      	lsls	r2, r2, #9
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 800083e:	2208      	movs	r2, #8
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	0212      	lsls	r2, r2, #8
 800084e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 f928 	bl	8001ab4 <HAL_UART_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000868:	f7ff fe81 	bl	800056e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000094 	.word	0x20000094
 8000878:	40013800 	.word	0x40013800

0800087c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	2414      	movs	r4, #20
 8000886:	193b      	adds	r3, r7, r4
 8000888:	0018      	movs	r0, r3
 800088a:	2314      	movs	r3, #20
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f001 fd98 	bl	80023c4 <memset>
  if(uartHandle->Instance==USART1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_UART_MspInit+0x94>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d133      	bne.n	8000906 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008a0:	699a      	ldr	r2, [r3, #24]
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	01c9      	lsls	r1, r1, #7
 80008a8:	430a      	orrs	r2, r1
 80008aa:	619a      	str	r2, [r3, #24]
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008ae:	699a      	ldr	r2, [r3, #24]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	01db      	lsls	r3, r3, #7
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0289      	lsls	r1, r1, #10
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_UART_MspInit+0x98>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	029b      	lsls	r3, r3, #10
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	22c0      	movs	r2, #192	; 0xc0
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2202      	movs	r2, #2
 80008e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2203      	movs	r2, #3
 80008f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 f9d5 	bl	8000cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b00b      	add	sp, #44	; 0x2c
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000

08000918 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, const char *ptr, ssize_t len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  if (file != STDOUT_FILENO && file != STDERR_FILENO)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d00a      	beq.n	8000940 <_write+0x28>
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d007      	beq.n	8000940 <_write+0x28>
  {
    errno = EIO;
 8000930:	f001 fd1e 	bl	8002370 <__errno>
 8000934:	0003      	movs	r3, r0
 8000936:	2205      	movs	r2, #5
 8000938:	601a      	str	r2, [r3, #0]
    return -1;
 800093a:	2301      	movs	r3, #1
 800093c:	425b      	negs	r3, r3
 800093e:	e022      	b.n	8000986 <_write+0x6e>
  }
  int i;
  for (i = 0; i < len; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	e01a      	b.n	800097c <_write+0x64>
  {
    if (ptr[i] == '\n')
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b0a      	cmp	r3, #10
 8000950:	d109      	bne.n	8000966 <_write+0x4e>
    {
      uint8_t temp = 13;
 8000952:	2113      	movs	r1, #19
 8000954:	187b      	adds	r3, r7, r1
 8000956:	220d      	movs	r2, #13
 8000958:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart1, &temp, 1, 10);
 800095a:	1879      	adds	r1, r7, r1
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <_write+0x78>)
 800095e:	230a      	movs	r3, #10
 8000960:	2201      	movs	r2, #1
 8000962:	f001 f8fb 	bl	8001b5c <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart1, &ptr[i], 1, 10);
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	18d1      	adds	r1, r2, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <_write+0x78>)
 800096e:	230a      	movs	r3, #10
 8000970:	2201      	movs	r2, #1
 8000972:	f001 f8f3 	bl	8001b5c <HAL_UART_Transmit>
  for (i = 0; i < len; i++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbe0      	blt.n	8000946 <_write+0x2e>
  }
  return i;
 8000984:	697b      	ldr	r3, [r7, #20]
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b006      	add	sp, #24
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000094 	.word	0x20000094

08000994 <uart_testing>:
 */
#include "usart.h"
#include "gpio.h"

void uart_testing()
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af00      	add	r7, sp, #0
    int data[] = {65,
 800099a:	003b      	movs	r3, r7
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <uart_testing+0x38>)
 800099e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009a0:	c313      	stmia	r3!, {r0, r1, r4}
 80009a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009a4:	c313      	stmia	r3!, {r0, r1, r4}
 80009a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009a8:	c313      	stmia	r3!, {r0, r1, r4}
 80009aa:	6812      	ldr	r2, [r2, #0]
 80009ac:	601a      	str	r2, [r3, #0]
                  72,
                  13,
                  10};
    while (1)
    {
        HAL_UART_Transmit(&huart1, data, 40, 1000);
 80009ae:	23fa      	movs	r3, #250	; 0xfa
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	0039      	movs	r1, r7
 80009b4:	4806      	ldr	r0, [pc, #24]	; (80009d0 <uart_testing+0x3c>)
 80009b6:	2228      	movs	r2, #40	; 0x28
 80009b8:	f001 f8d0 	bl	8001b5c <HAL_UART_Transmit>
        printf("Some words to print, and a in ascii %d\n", data[0]);
 80009bc:	003b      	movs	r3, r7
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <uart_testing+0x40>)
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fd05 	bl	80023d4 <iprintf>
    {
 80009ca:	e7f0      	b.n	80009ae <uart_testing+0x1a>
 80009cc:	080033ec 	.word	0x080033ec
 80009d0:	20000094 	.word	0x20000094
 80009d4:	080033c4 	.word	0x080033c4

080009d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009da:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 80009dc:	f7ff ff16 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a06:	f001 fcb9 	bl	800237c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a0a:	f7ff fc8f 	bl	800032c <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   r0, =_estack
 8000a10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a1c:	080034ec 	.word	0x080034ec
  ldr r2, =_sbss
 8000a20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a24:	20000130 	.word	0x20000130

08000a28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_COMP_IRQHandler>
	...

08000a2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_Init+0x24>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_Init+0x24>)
 8000a36:	2110      	movs	r1, #16
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 f809 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a42:	f7ff fe19 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a5e:	681c      	ldr	r4, [r3, #0]
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	0019      	movs	r1, r3
 8000a66:	23fa      	movs	r3, #250	; 0xfa
 8000a68:	0098      	lsls	r0, r3, #2
 8000a6a:	f7ff fb57 	bl	800011c <__udivsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	0019      	movs	r1, r3
 8000a72:	0020      	movs	r0, r4
 8000a74:	f7ff fb52 	bl	800011c <__udivsi3>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f90b 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00f      	b.n	8000aa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d80b      	bhi.n	8000aa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	2200      	movs	r2, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f8d8 	bl	8000c4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_InitTick+0x64>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b003      	add	sp, #12
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	18d2      	adds	r2, r2, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	2000011c 	.word	0x2000011c

08000ae0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	2000011c 	.word	0x2000011c

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b7f      	cmp	r3, #127	; 0x7f
 8000b06:	d809      	bhi.n	8000b1c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	231f      	movs	r3, #31
 8000b10:	401a      	ands	r2, r3
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_EnableIRQ+0x30>)
 8000b14:	2101      	movs	r1, #1
 8000b16:	4091      	lsls	r1, r2
 8000b18:	000a      	movs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	d828      	bhi.n	8000b90 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3e:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	33c0      	adds	r3, #192	; 0xc0
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	589b      	ldr	r3, [r3, r2]
 8000b4e:	1dfa      	adds	r2, r7, #7
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	0011      	movs	r1, r2
 8000b54:	2203      	movs	r2, #3
 8000b56:	400a      	ands	r2, r1
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	21ff      	movs	r1, #255	; 0xff
 8000b5c:	4091      	lsls	r1, r2
 8000b5e:	000a      	movs	r2, r1
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	401a      	ands	r2, r3
 8000b64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0018      	movs	r0, r3
 8000b74:	2303      	movs	r3, #3
 8000b76:	4003      	ands	r3, r0
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	481f      	ldr	r0, [pc, #124]	; (8000bfc <__NVIC_SetPriority+0xd4>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	430a      	orrs	r2, r1
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b8e:	e031      	b.n	8000bf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0019      	movs	r1, r3
 8000b98:	230f      	movs	r3, #15
 8000b9a:	400b      	ands	r3, r1
 8000b9c:	3b08      	subs	r3, #8
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3306      	adds	r3, #6
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1dfa      	adds	r2, r7, #7
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	0011      	movs	r1, r2
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	00d2      	lsls	r2, r2, #3
 8000bb6:	21ff      	movs	r1, #255	; 0xff
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	000a      	movs	r2, r1
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	019b      	lsls	r3, r3, #6
 8000bc6:	22ff      	movs	r2, #255	; 0xff
 8000bc8:	401a      	ands	r2, r3
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <__NVIC_SetPriority+0xd8>)
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	001c      	movs	r4, r3
 8000be0:	230f      	movs	r3, #15
 8000be2:	4023      	ands	r3, r4
 8000be4:	3b08      	subs	r3, #8
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	3306      	adds	r3, #6
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	601a      	str	r2, [r3, #0]
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d301      	bcc.n	8000c1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e010      	b.n	8000c3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <SysTick_Config+0x44>)
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	3a01      	subs	r2, #1
 8000c22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c24:	2301      	movs	r3, #1
 8000c26:	425b      	negs	r3, r3
 8000c28:	2103      	movs	r1, #3
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff ff7c 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x44>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x44>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	210f      	movs	r1, #15
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	1c02      	adds	r2, r0, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff33 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ffaf 	bl	8000c04 <SysTick_Config>
 8000ca6:	0003      	movs	r3, r0
}
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e14f      	b.n	8000f60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <HAL_GPIO_Init+0x28>
 8000cd6:	e140      	b.n	8000f5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2203      	movs	r2, #3
 8000cea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	409a      	lsls	r2, r3
 8000d12:	0013      	movs	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2203      	movs	r2, #3
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	0092      	lsls	r2, r2, #2
 8000da4:	58d3      	ldr	r3, [r2, r3]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	2207      	movs	r2, #7
 8000dac:	4013      	ands	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2107      	movs	r1, #7
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	0092      	lsls	r2, r2, #2
 8000dde:	6939      	ldr	r1, [r7, #16]
 8000de0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2203      	movs	r2, #3
 8000e00:	401a      	ands	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	029b      	lsls	r3, r3, #10
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d100      	bne.n	8000e24 <HAL_GPIO_Init+0x174>
 8000e22:	e09a      	b.n	8000f5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000e26:	699a      	ldr	r2, [r3, #24]
 8000e28:	4b53      	ldr	r3, [pc, #332]	; (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	619a      	str	r2, [r3, #24]
 8000e30:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <HAL_GPIO_Init+0x2c8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	2201      	movs	r2, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	; (8000f7c <HAL_GPIO_Init+0x2cc>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	589b      	ldr	r3, [r3, r2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	4013      	ands	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	409a      	lsls	r2, r3
 8000e56:	0013      	movs	r3, r2
 8000e58:	43da      	mvns	r2, r3
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	2390      	movs	r3, #144	; 0x90
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d013      	beq.n	8000e92 <HAL_GPIO_Init+0x1e2>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a44      	ldr	r2, [pc, #272]	; (8000f80 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d00d      	beq.n	8000e8e <HAL_GPIO_Init+0x1de>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <HAL_GPIO_Init+0x2d4>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x1da>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_GPIO_Init+0x1d6>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e86:	2305      	movs	r3, #5
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e92:	2300      	movs	r3, #0
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	2103      	movs	r1, #3
 8000e98:	400a      	ands	r2, r1
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea4:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x2cc>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	035b      	lsls	r3, r3, #13
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000edc:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	039b      	lsls	r3, r3, #14
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	2380      	movs	r3, #128	; 0x80
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	43da      	mvns	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	025b      	lsls	r3, r3, #9
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	40da      	lsrs	r2, r3
 8000f68:	1e13      	subs	r3, r2, #0
 8000f6a:	d000      	beq.n	8000f6e <HAL_GPIO_Init+0x2be>
 8000f6c:	e6a8      	b.n	8000cc0 <HAL_GPIO_Init+0x10>
  } 
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b006      	add	sp, #24
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000c00 	.word	0x48000c00
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	000a      	movs	r2, r1
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	1cba      	adds	r2, r7, #2
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d004      	beq.n	8000fb4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e003      	b.n	8000fbc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
  }
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b004      	add	sp, #16
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	0008      	movs	r0, r1
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	1cbb      	adds	r3, r7, #2
 8000fd8:	1c02      	adds	r2, r0, #0
 8000fda:	801a      	strh	r2, [r3, #0]
 8000fdc:	1c7b      	adds	r3, r7, #1
 8000fde:	1c0a      	adds	r2, r1, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe2:	1c7b      	adds	r3, r7, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d004      	beq.n	8000ff4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fea:	1cbb      	adds	r3, r7, #2
 8000fec:	881a      	ldrh	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dbb      	adds	r3, r7, #6
 800100e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	8812      	ldrh	r2, [r2, #0]
 8001018:	4013      	ands	r3, r2
 800101a:	d008      	beq.n	800102e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800101e:	1dba      	adds	r2, r7, #6
 8001020:	8812      	ldrh	r2, [r2, #0]
 8001022:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff faa5 	bl	8000578 <HAL_GPIO_EXTI_Callback>
  }
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e301      	b.n	8001652 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	d100      	bne.n	800105a <HAL_RCC_OscConfig+0x1e>
 8001058:	e08d      	b.n	8001176 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105a:	4bc3      	ldr	r3, [pc, #780]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	220c      	movs	r2, #12
 8001060:	4013      	ands	r3, r2
 8001062:	2b04      	cmp	r3, #4
 8001064:	d00e      	beq.n	8001084 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001066:	4bc0      	ldr	r3, [pc, #768]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	220c      	movs	r2, #12
 800106c:	4013      	ands	r3, r2
 800106e:	2b08      	cmp	r3, #8
 8001070:	d116      	bne.n	80010a0 <HAL_RCC_OscConfig+0x64>
 8001072:	4bbd      	ldr	r3, [pc, #756]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	025b      	lsls	r3, r3, #9
 800107a:	401a      	ands	r2, r3
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	025b      	lsls	r3, r3, #9
 8001080:	429a      	cmp	r2, r3
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	4bb8      	ldr	r3, [pc, #736]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d100      	bne.n	8001092 <HAL_RCC_OscConfig+0x56>
 8001090:	e070      	b.n	8001174 <HAL_RCC_OscConfig+0x138>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d000      	beq.n	800109c <HAL_RCC_OscConfig+0x60>
 800109a:	e06b      	b.n	8001174 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e2d8      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d107      	bne.n	80010b8 <HAL_RCC_OscConfig+0x7c>
 80010a8:	4baf      	ldr	r3, [pc, #700]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4bae      	ldr	r3, [pc, #696]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	0249      	lsls	r1, r1, #9
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e02f      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10c      	bne.n	80010da <HAL_RCC_OscConfig+0x9e>
 80010c0:	4ba9      	ldr	r3, [pc, #676]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4ba8      	ldr	r3, [pc, #672]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	49a9      	ldr	r1, [pc, #676]	; (800136c <HAL_RCC_OscConfig+0x330>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	4ba6      	ldr	r3, [pc, #664]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4ba5      	ldr	r3, [pc, #660]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	49a7      	ldr	r1, [pc, #668]	; (8001370 <HAL_RCC_OscConfig+0x334>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e01e      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d10e      	bne.n	8001100 <HAL_RCC_OscConfig+0xc4>
 80010e2:	4ba1      	ldr	r3, [pc, #644]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4ba0      	ldr	r3, [pc, #640]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	02c9      	lsls	r1, r1, #11
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	4b9d      	ldr	r3, [pc, #628]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b9c      	ldr	r3, [pc, #624]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	0249      	lsls	r1, r1, #9
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
 8001100:	4b99      	ldr	r3, [pc, #612]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b98      	ldr	r3, [pc, #608]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001106:	4999      	ldr	r1, [pc, #612]	; (800136c <HAL_RCC_OscConfig+0x330>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4b96      	ldr	r3, [pc, #600]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b95      	ldr	r3, [pc, #596]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001112:	4997      	ldr	r1, [pc, #604]	; (8001370 <HAL_RCC_OscConfig+0x334>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d014      	beq.n	800114a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fcde 	bl	8000ae0 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112a:	f7ff fcd9 	bl	8000ae0 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e28a      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	4b8a      	ldr	r3, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0xee>
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fcc9 	bl	8000ae0 <HAL_GetTick>
 800114e:	0003      	movs	r3, r0
 8001150:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcc4 	bl	8000ae0 <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e275      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b80      	ldr	r3, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x118>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x146>
 8001180:	e069      	b.n	8001256 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001182:	4b79      	ldr	r3, [pc, #484]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	220c      	movs	r2, #12
 8001188:	4013      	ands	r3, r2
 800118a:	d00b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800118c:	4b76      	ldr	r3, [pc, #472]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
 8001194:	2b08      	cmp	r3, #8
 8001196:	d11c      	bne.n	80011d2 <HAL_RCC_OscConfig+0x196>
 8001198:	4b73      	ldr	r3, [pc, #460]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	4013      	ands	r3, r2
 80011a2:	d116      	bne.n	80011d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a4:	4b70      	ldr	r3, [pc, #448]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2202      	movs	r2, #2
 80011aa:	4013      	ands	r3, r2
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x17e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e24b      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	22f8      	movs	r2, #248	; 0xf8
 80011c0:	4393      	bics	r3, r2
 80011c2:	0019      	movs	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	00da      	lsls	r2, r3, #3
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d0:	e041      	b.n	8001256 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d024      	beq.n	8001224 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc7b 	bl	8000ae0 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc76 	bl	8000ae0 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e227      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b59      	ldr	r3, [pc, #356]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2202      	movs	r2, #2
 8001208:	4013      	ands	r3, r2
 800120a:	d0f1      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b56      	ldr	r3, [pc, #344]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	22f8      	movs	r2, #248	; 0xf8
 8001212:	4393      	bics	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00da      	lsls	r2, r3, #3
 800121c:	4b52      	ldr	r3, [pc, #328]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e018      	b.n	8001256 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001224:	4b50      	ldr	r3, [pc, #320]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc56 	bl	8000ae0 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123a:	f7ff fc51 	bl	8000ae0 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e202      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124c:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d1f1      	bne.n	800123a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2208      	movs	r2, #8
 800125c:	4013      	ands	r3, r2
 800125e:	d036      	beq.n	80012ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d019      	beq.n	800129c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001268:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800126a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126c:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800126e:	2101      	movs	r1, #1
 8001270:	430a      	orrs	r2, r1
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001274:	f7ff fc34 	bl	8000ae0 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fc2f 	bl	8000ae0 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1e0      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d0f1      	beq.n	800127e <HAL_RCC_OscConfig+0x242>
 800129a:	e018      	b.n	80012ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800129e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	438a      	bics	r2, r1
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc1a 	bl	8000ae0 <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc15 	bl	8000ae0 <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1c6      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2202      	movs	r2, #2
 80012ca:	4013      	ands	r3, r2
 80012cc:	d1f1      	bne.n	80012b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2204      	movs	r2, #4
 80012d4:	4013      	ands	r3, r2
 80012d6:	d100      	bne.n	80012da <HAL_RCC_OscConfig+0x29e>
 80012d8:	e0b4      	b.n	8001444 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	201f      	movs	r0, #31
 80012dc:	183b      	adds	r3, r7, r0
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	055b      	lsls	r3, r3, #21
 80012ea:	4013      	ands	r3, r2
 80012ec:	d110      	bne.n	8001310 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012f0:	69da      	ldr	r2, [r3, #28]
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0549      	lsls	r1, r1, #21
 80012f8:	430a      	orrs	r2, r1
 80012fa:	61da      	str	r2, [r3, #28]
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	69da      	ldr	r2, [r3, #28]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	055b      	lsls	r3, r3, #21
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800130a:	183b      	adds	r3, r7, r0
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d11a      	bne.n	8001352 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	0049      	lsls	r1, r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fbd9 	bl	8000ae0 <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff fbd4 	bl	8000ae0 <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e185      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4013      	ands	r3, r2
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10e      	bne.n	8001378 <HAL_RCC_OscConfig+0x33c>
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_RCC_OscConfig+0x32c>)
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	e035      	b.n	80013d4 <HAL_RCC_OscConfig+0x398>
 8001368:	40021000 	.word	0x40021000
 800136c:	fffeffff 	.word	0xfffeffff
 8001370:	fffbffff 	.word	0xfffbffff
 8001374:	40007000 	.word	0x40007000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x35e>
 8001380:	4bb6      	ldr	r3, [pc, #728]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	4bb5      	ldr	r3, [pc, #724]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001386:	2101      	movs	r1, #1
 8001388:	438a      	bics	r2, r1
 800138a:	621a      	str	r2, [r3, #32]
 800138c:	4bb3      	ldr	r3, [pc, #716]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4bb2      	ldr	r3, [pc, #712]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001392:	2104      	movs	r1, #4
 8001394:	438a      	bics	r2, r1
 8001396:	621a      	str	r2, [r3, #32]
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x398>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x380>
 80013a2:	4bae      	ldr	r3, [pc, #696]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013a4:	6a1a      	ldr	r2, [r3, #32]
 80013a6:	4bad      	ldr	r3, [pc, #692]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013a8:	2104      	movs	r1, #4
 80013aa:	430a      	orrs	r2, r1
 80013ac:	621a      	str	r2, [r3, #32]
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4baa      	ldr	r3, [pc, #680]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x398>
 80013bc:	4ba7      	ldr	r3, [pc, #668]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	4ba6      	ldr	r3, [pc, #664]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	438a      	bics	r2, r1
 80013c6:	621a      	str	r2, [r3, #32]
 80013c8:	4ba4      	ldr	r3, [pc, #656]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4ba3      	ldr	r3, [pc, #652]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013ce:	2104      	movs	r1, #4
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d014      	beq.n	8001406 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fb80 	bl	8000ae0 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	e009      	b.n	80013fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fb7b 	bl	8000ae0 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a9b      	ldr	r2, [pc, #620]	; (8001660 <HAL_RCC_OscConfig+0x624>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e12b      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4b98      	ldr	r3, [pc, #608]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3aa>
 8001404:	e013      	b.n	800142e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fb6b 	bl	8000ae0 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e009      	b.n	8001424 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fb66 	bl	8000ae0 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	4a91      	ldr	r2, [pc, #580]	; (8001660 <HAL_RCC_OscConfig+0x624>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e116      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001424:	4b8d      	ldr	r3, [pc, #564]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800142e:	231f      	movs	r3, #31
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b88      	ldr	r3, [pc, #544]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800143a:	69da      	ldr	r2, [r3, #28]
 800143c:	4b87      	ldr	r3, [pc, #540]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800143e:	4989      	ldr	r1, [pc, #548]	; (8001664 <HAL_RCC_OscConfig+0x628>)
 8001440:	400a      	ands	r2, r1
 8001442:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2210      	movs	r2, #16
 800144a:	4013      	ands	r3, r2
 800144c:	d063      	beq.n	8001516 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d12a      	bne.n	80014ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001456:	4b81      	ldr	r3, [pc, #516]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145a:	4b80      	ldr	r3, [pc, #512]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800145c:	2104      	movs	r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001462:	4b7e      	ldr	r3, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b7d      	ldr	r3, [pc, #500]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fb37 	bl	8000ae0 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001478:	f7ff fb32 	bl	8000ae0 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e0e3      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d0f1      	beq.n	8001478 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001494:	4b71      	ldr	r3, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	22f8      	movs	r2, #248	; 0xf8
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	00da      	lsls	r2, r3, #3
 80014a4:	4b6d      	ldr	r3, [pc, #436]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
 80014aa:	e034      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	3305      	adds	r3, #5
 80014b2:	d111      	bne.n	80014d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014b4:	4b69      	ldr	r3, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b8:	4b68      	ldr	r3, [pc, #416]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014ba:	2104      	movs	r1, #4
 80014bc:	438a      	bics	r2, r1
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c4:	22f8      	movs	r2, #248	; 0xf8
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	00da      	lsls	r2, r3, #3
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
 80014d6:	e01e      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014d8:	4b60      	ldr	r3, [pc, #384]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014dc:	4b5f      	ldr	r3, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014de:	2104      	movs	r1, #4
 80014e0:	430a      	orrs	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014e4:	4b5d      	ldr	r3, [pc, #372]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b5c      	ldr	r3, [pc, #368]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff faf6 	bl	8000ae0 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014fa:	f7ff faf1 	bl	8000ae0 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0a2      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800150e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f1      	bne.n	80014fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x4e4>
 800151e:	e097      	b.n	8001650 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b4e      	ldr	r3, [pc, #312]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	2b08      	cmp	r3, #8
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x4f2>
 800152c:	e06b      	b.n	8001606 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d14c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b49      	ldr	r3, [pc, #292]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b48      	ldr	r3, [pc, #288]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800153c:	494a      	ldr	r1, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x62c>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff facd 	bl	8000ae0 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fac8 	bl	8000ae0 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e079      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	049b      	lsls	r3, r3, #18
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	220f      	movs	r2, #15
 8001570:	4393      	bics	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800157a:	430a      	orrs	r2, r1
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
 800157e:	4b37      	ldr	r3, [pc, #220]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a3a      	ldr	r2, [pc, #232]	; (800166c <HAL_RCC_OscConfig+0x630>)
 8001584:	4013      	ands	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	431a      	orrs	r2, r3
 8001592:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	0449      	lsls	r1, r1, #17
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fa9b 	bl	8000ae0 <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fa96 	bl	8000ae0 <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e047      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c2:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	049b      	lsls	r3, r3, #18
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x574>
 80015ce:	e03f      	b.n	8001650 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80015d6:	4924      	ldr	r1, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x62c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fa80 	bl	8000ae0 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa7b 	bl	8000ae0 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e02c      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_OscConfig+0x620>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	049b      	lsls	r3, r3, #18
 8001600:	4013      	ands	r3, r2
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5aa>
 8001604:	e024      	b.n	8001650 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e01f      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_OscConfig+0x620>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_RCC_OscConfig+0x620>)
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	025b      	lsls	r3, r3, #9
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	429a      	cmp	r2, r3
 800162c:	d10e      	bne.n	800164c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	220f      	movs	r2, #15
 8001632:	401a      	ands	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	23f0      	movs	r3, #240	; 0xf0
 8001640:	039b      	lsls	r3, r3, #14
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b008      	add	sp, #32
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000
 8001660:	00001388 	.word	0x00001388
 8001664:	efffffff 	.word	0xefffffff
 8001668:	feffffff 	.word	0xfeffffff
 800166c:	ffc2ffff 	.word	0xffc2ffff

08001670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b3      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d911      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	4393      	bics	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2201      	movs	r2, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e09a      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d015      	beq.n	80016ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2204      	movs	r2, #4
 80016c6:	4013      	ands	r3, r2
 80016c8:	d006      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016ca:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80016d0:	21e0      	movs	r1, #224	; 0xe0
 80016d2:	00c9      	lsls	r1, r1, #3
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	22f0      	movs	r2, #240	; 0xf0
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	d040      	beq.n	8001778 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d114      	bne.n	8001734 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06e      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	049b      	lsls	r3, r3, #18
 800171e:	4013      	ands	r3, r2
 8001720:	d108      	bne.n	8001734 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e062      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e05b      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	4393      	bics	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001744:	430a      	orrs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff f9ca 	bl	8000ae0 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001750:	e009      	b.n	8001766 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff f9c5 	bl	8000ae0 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <HAL_RCC_ClockConfig+0x18c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e042      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	220c      	movs	r2, #12
 800176c:	401a      	ands	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1ec      	bne.n	8001752 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d211      	bcs.n	80017aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x184>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e020      	b.n	80017ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_RCC_ClockConfig+0x190>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017c8:	f000 f820 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017cc:	0001      	movs	r1, r0
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x188>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x194>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	000a      	movs	r2, r1
 80017de:	40da      	lsrs	r2, r3
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x198>)
 80017e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff f935 	bl	8000a54 <HAL_InitTick>
  
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b004      	add	sp, #16
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	00001388 	.word	0x00001388
 8001800:	fffff8ff 	.word	0xfffff8ff
 8001804:	08003414 	.word	0x08003414
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	220c      	movs	r2, #12
 8001830:	4013      	ands	r3, r2
 8001832:	2b04      	cmp	r3, #4
 8001834:	d002      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x30>
 8001836:	2b08      	cmp	r3, #8
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x36>
 800183a:	e02c      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800183e:	613b      	str	r3, [r7, #16]
      break;
 8001840:	e02c      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	220f      	movs	r2, #15
 8001848:	4013      	ands	r3, r2
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	220f      	movs	r2, #15
 8001856:	4013      	ands	r3, r2
 8001858:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	025b      	lsls	r3, r3, #9
 8001864:	4013      	ands	r3, r2
 8001866:	d009      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	4810      	ldr	r0, [pc, #64]	; (80018ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800186c:	f7fe fc56 	bl	800011c <__udivsi3>
 8001870:	0003      	movs	r3, r0
 8001872:	001a      	movs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4353      	muls	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	e009      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	000a      	movs	r2, r1
 8001880:	0152      	lsls	r2, r2, #5
 8001882:	1a52      	subs	r2, r2, r1
 8001884:	0193      	lsls	r3, r2, #6
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	185b      	adds	r3, r3, r1
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
      break;
 8001894:	e002      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001898:	613b      	str	r3, [r7, #16]
      break;
 800189a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800189c:	693b      	ldr	r3, [r7, #16]
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b006      	add	sp, #24
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	007a1200 	.word	0x007a1200
 80018b0:	0800342c 	.word	0x0800342c
 80018b4:	0800343c 	.word	0x0800343c

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80018d0:	f7ff fff2 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d4:	0001      	movs	r1, r0
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	000b      	movs	r3, r1
}    
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08003424 	.word	0x08003424

080018f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	025b      	lsls	r3, r3, #9
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001914:	e08e      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2017      	movs	r0, #23
 8001918:	183b      	adds	r3, r7, r0
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191e:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	055b      	lsls	r3, r3, #21
 8001926:	4013      	ands	r3, r2
 8001928:	d110      	bne.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b5c      	ldr	r3, [pc, #368]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	430a      	orrs	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	4b58      	ldr	r3, [pc, #352]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001946:	183b      	adds	r3, r7, r0
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b54      	ldr	r3, [pc, #336]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d11a      	bne.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001958:	4b51      	ldr	r3, [pc, #324]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0049      	lsls	r1, r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff f8bb 	bl	8000ae0 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	e008      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7ff f8b6 	bl	8000ae0 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4013      	ands	r3, r2
 800198c:	d0f0      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800198e:	4b43      	ldr	r3, [pc, #268]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001990:	6a1a      	ldr	r2, [r3, #32]
 8001992:	23c0      	movs	r3, #192	; 0xc0
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d034      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	23c0      	movs	r3, #192	; 0xc0
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d02c      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019bc:	6a1a      	ldr	r2, [r3, #32]
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0249      	lsls	r1, r1, #9
 80019c4:	430a      	orrs	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ce:	4936      	ldr	r1, [pc, #216]	; (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80019d0:	400a      	ands	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019d4:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	d013      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f87d 	bl	8000ae0 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ea:	e009      	b.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff f878 	bl	8000ae0 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a2d      	ldr	r2, [pc, #180]	; (8001aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e048      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a25      	ldr	r2, [pc, #148]	; (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a1e:	2317      	movs	r3, #23
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a2e:	4920      	ldr	r1, [pc, #128]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	2203      	movs	r2, #3
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2220      	movs	r2, #32
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	2210      	movs	r2, #16
 8001a62:	4393      	bics	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	4393      	bics	r3, r2
 8001a84:	0019      	movs	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	fffffcff 	.word	0xfffffcff
 8001aa8:	fffeffff 	.word	0xfffeffff
 8001aac:	00001388 	.word	0x00001388
 8001ab0:	efffffff 	.word	0xefffffff

08001ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e044      	b.n	8001b50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2278      	movs	r2, #120	; 0x78
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7fe fecf 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2224      	movs	r2, #36	; 0x24
 8001ae2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f8d0 	bl	8001c9c <UART_SetConfig>
 8001afc:	0003      	movs	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e024      	b.n	8001b50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fa03 	bl	8001f1c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	490d      	ldr	r1, [pc, #52]	; (8001b58 <HAL_UART_Init+0xa4>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	212a      	movs	r1, #42	; 0x2a
 8001b32:	438a      	bics	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fa9b 	bl	8002084 <UART_CheckIdleState>
 8001b4e:	0003      	movs	r3, r0
}
 8001b50:	0018      	movs	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	ffffb7ff 	.word	0xffffb7ff

08001b5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d000      	beq.n	8001b76 <HAL_UART_Transmit+0x1a>
 8001b74:	e08d      	b.n	8001c92 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_UART_Transmit+0x28>
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e085      	b.n	8001c94 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	015b      	lsls	r3, r3, #5
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d109      	bne.n	8001ba8 <HAL_UART_Transmit+0x4c>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e075      	b.n	8001c94 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2284      	movs	r2, #132	; 0x84
 8001bac:	2100      	movs	r1, #0
 8001bae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2221      	movs	r2, #33	; 0x21
 8001bb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bb6:	f7fe ff93 	bl	8000ae0 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1dba      	adds	r2, r7, #6
 8001bc2:	2150      	movs	r1, #80	; 0x50
 8001bc4:	8812      	ldrh	r2, [r2, #0]
 8001bc6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1dba      	adds	r2, r7, #6
 8001bcc:	2152      	movs	r1, #82	; 0x52
 8001bce:	8812      	ldrh	r2, [r2, #0]
 8001bd0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d108      	bne.n	8001bf0 <HAL_UART_Transmit+0x94>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	e003      	b.n	8001bf8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001bf8:	e030      	b.n	8001c5c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	0013      	movs	r3, r2
 8001c04:	2200      	movs	r2, #0
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	f000 fae4 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e03c      	b.n	8001c94 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	881a      	ldrh	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	05d2      	lsls	r2, r2, #23
 8001c2a:	0dd2      	lsrs	r2, r2, #23
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	3302      	adds	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e008      	b.n	8001c4a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b292      	uxth	r2, r2
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2252      	movs	r2, #82	; 0x52
 8001c4e:	5a9b      	ldrh	r3, [r3, r2]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b299      	uxth	r1, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2252      	movs	r2, #82	; 0x52
 8001c5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2252      	movs	r2, #82	; 0x52
 8001c60:	5a9b      	ldrh	r3, [r3, r2]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1c8      	bne.n	8001bfa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	0013      	movs	r3, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	f000 faad 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2220      	movs	r2, #32
 8001c82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e005      	b.n	8001c94 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
  }
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b008      	add	sp, #32
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ca4:	231e      	movs	r3, #30
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8d      	ldr	r2, [pc, #564]	; (8001f00 <UART_SetConfig+0x264>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a88      	ldr	r2, [pc, #544]	; (8001f04 <UART_SetConfig+0x268>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a7f      	ldr	r2, [pc, #508]	; (8001f08 <UART_SetConfig+0x26c>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7b      	ldr	r2, [pc, #492]	; (8001f0c <UART_SetConfig+0x270>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d127      	bne.n	8001d72 <UART_SetConfig+0xd6>
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <UART_SetConfig+0x274>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	2203      	movs	r2, #3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d00d      	beq.n	8001d4a <UART_SetConfig+0xae>
 8001d2e:	d81b      	bhi.n	8001d68 <UART_SetConfig+0xcc>
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d014      	beq.n	8001d5e <UART_SetConfig+0xc2>
 8001d34:	d818      	bhi.n	8001d68 <UART_SetConfig+0xcc>
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <UART_SetConfig+0xa4>
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d00a      	beq.n	8001d54 <UART_SetConfig+0xb8>
 8001d3e:	e013      	b.n	8001d68 <UART_SetConfig+0xcc>
 8001d40:	231f      	movs	r3, #31
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e021      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e01c      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d54:	231f      	movs	r3, #31
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2204      	movs	r2, #4
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e017      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d5e:	231f      	movs	r3, #31
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2208      	movs	r2, #8
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	e012      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d68:	231f      	movs	r3, #31
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e00d      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a67      	ldr	r2, [pc, #412]	; (8001f14 <UART_SetConfig+0x278>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d104      	bne.n	8001d86 <UART_SetConfig+0xea>
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e003      	b.n	8001d8e <UART_SetConfig+0xf2>
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69da      	ldr	r2, [r3, #28]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d15c      	bne.n	8001e54 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d015      	beq.n	8001dd0 <UART_SetConfig+0x134>
 8001da4:	dc18      	bgt.n	8001dd8 <UART_SetConfig+0x13c>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d00d      	beq.n	8001dc6 <UART_SetConfig+0x12a>
 8001daa:	dc15      	bgt.n	8001dd8 <UART_SetConfig+0x13c>
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <UART_SetConfig+0x11a>
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d005      	beq.n	8001dc0 <UART_SetConfig+0x124>
 8001db4:	e010      	b.n	8001dd8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001db6:	f7ff fd89 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
        break;
 8001dbe:	e012      	b.n	8001de6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dc0:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <UART_SetConfig+0x27c>)
 8001dc2:	61bb      	str	r3, [r7, #24]
        break;
 8001dc4:	e00f      	b.n	8001de6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001dc6:	f7ff fd21 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
        break;
 8001dce:	e00a      	b.n	8001de6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	61bb      	str	r3, [r7, #24]
        break;
 8001dd6:	e006      	b.n	8001de6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ddc:	231e      	movs	r3, #30
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
        break;
 8001de4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d100      	bne.n	8001dee <UART_SetConfig+0x152>
 8001dec:	e07a      	b.n	8001ee4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	005a      	lsls	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	18d2      	adds	r2, r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0019      	movs	r1, r3
 8001e00:	0010      	movs	r0, r2
 8001e02:	f7fe f98b 	bl	800011c <__udivsi3>
 8001e06:	0003      	movs	r3, r0
 8001e08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d91c      	bls.n	8001e4a <UART_SetConfig+0x1ae>
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d217      	bcs.n	8001e4a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	200e      	movs	r0, #14
 8001e20:	183b      	adds	r3, r7, r0
 8001e22:	210f      	movs	r1, #15
 8001e24:	438a      	bics	r2, r1
 8001e26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4013      	ands	r3, r2
 8001e32:	b299      	uxth	r1, r3
 8001e34:	183b      	adds	r3, r7, r0
 8001e36:	183a      	adds	r2, r7, r0
 8001e38:	8812      	ldrh	r2, [r2, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	183a      	adds	r2, r7, r0
 8001e44:	8812      	ldrh	r2, [r2, #0]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	e04c      	b.n	8001ee4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001e4a:	231e      	movs	r3, #30
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e047      	b.n	8001ee4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e54:	231f      	movs	r3, #31
 8001e56:	18fb      	adds	r3, r7, r3
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d015      	beq.n	8001e8a <UART_SetConfig+0x1ee>
 8001e5e:	dc18      	bgt.n	8001e92 <UART_SetConfig+0x1f6>
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00d      	beq.n	8001e80 <UART_SetConfig+0x1e4>
 8001e64:	dc15      	bgt.n	8001e92 <UART_SetConfig+0x1f6>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <UART_SetConfig+0x1d4>
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d005      	beq.n	8001e7a <UART_SetConfig+0x1de>
 8001e6e:	e010      	b.n	8001e92 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e70:	f7ff fd2c 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]
        break;
 8001e78:	e012      	b.n	8001ea0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <UART_SetConfig+0x27c>)
 8001e7c:	61bb      	str	r3, [r7, #24]
        break;
 8001e7e:	e00f      	b.n	8001ea0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e80:	f7ff fcc4 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8001e84:	0003      	movs	r3, r0
 8001e86:	61bb      	str	r3, [r7, #24]
        break;
 8001e88:	e00a      	b.n	8001ea0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	61bb      	str	r3, [r7, #24]
        break;
 8001e90:	e006      	b.n	8001ea0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e96:	231e      	movs	r3, #30
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
        break;
 8001e9e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01e      	beq.n	8001ee4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	085a      	lsrs	r2, r3, #1
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	18d2      	adds	r2, r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	0010      	movs	r0, r2
 8001eb8:	f7fe f930 	bl	800011c <__udivsi3>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d90a      	bls.n	8001edc <UART_SetConfig+0x240>
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d205      	bcs.n	8001edc <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	e003      	b.n	8001ee4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001edc:	231e      	movs	r3, #30
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001ef0:	231e      	movs	r3, #30
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b008      	add	sp, #32
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	ffff69f3 	.word	0xffff69f3
 8001f04:	ffffcfff 	.word	0xffffcfff
 8001f08:	fffff4ff 	.word	0xfffff4ff
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40004400 	.word	0x40004400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <UART_AdvFeatureConfig+0x144>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	0019      	movs	r1, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <UART_AdvFeatureConfig+0x148>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d00b      	beq.n	8001f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <UART_AdvFeatureConfig+0x14c>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d00b      	beq.n	8001fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <UART_AdvFeatureConfig+0x150>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	; (8002070 <UART_AdvFeatureConfig+0x154>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <UART_AdvFeatureConfig+0x158>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d01d      	beq.n	8002036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <UART_AdvFeatureConfig+0x15c>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	035b      	lsls	r3, r3, #13
 800201a:	429a      	cmp	r2, r3
 800201c:	d10b      	bne.n	8002036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <UART_AdvFeatureConfig+0x160>)
 8002026:	4013      	ands	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	4013      	ands	r3, r2
 800203e:	d00b      	beq.n	8002058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <UART_AdvFeatureConfig+0x164>)
 8002048:	4013      	ands	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
  }
}
 8002058:	46c0      	nop			; (mov r8, r8)
 800205a:	46bd      	mov	sp, r7
 800205c:	b002      	add	sp, #8
 800205e:	bd80      	pop	{r7, pc}
 8002060:	fffdffff 	.word	0xfffdffff
 8002064:	fffeffff 	.word	0xfffeffff
 8002068:	fffbffff 	.word	0xfffbffff
 800206c:	ffff7fff 	.word	0xffff7fff
 8002070:	ffffefff 	.word	0xffffefff
 8002074:	ffffdfff 	.word	0xffffdfff
 8002078:	ffefffff 	.word	0xffefffff
 800207c:	ff9fffff 	.word	0xff9fffff
 8002080:	fff7ffff 	.word	0xfff7ffff

08002084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b092      	sub	sp, #72	; 0x48
 8002088:	af02      	add	r7, sp, #8
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2284      	movs	r2, #132	; 0x84
 8002090:	2100      	movs	r1, #0
 8002092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002094:	f7fe fd24 	bl	8000ae0 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2208      	movs	r2, #8
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d12c      	bne.n	8002104 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0391      	lsls	r1, r2, #14
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4a46      	ldr	r2, [pc, #280]	; (80021cc <UART_CheckIdleState+0x148>)
 80020b4:	9200      	str	r2, [sp, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f000 f88c 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d021      	beq.n	8002104 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c0:	f3ef 8310 	mrs	r3, PRIMASK
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80020c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ca:	2301      	movs	r3, #1
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d0:	f383 8810 	msr	PRIMASK, r3
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	438a      	bics	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	f383 8810 	msr	PRIMASK, r3
}
 80020f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2278      	movs	r2, #120	; 0x78
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e05f      	b.n	80021c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	2b04      	cmp	r3, #4
 8002110:	d146      	bne.n	80021a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	03d1      	lsls	r1, r2, #15
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <UART_CheckIdleState+0x148>)
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	f000 f858 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d03b      	beq.n	80021a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002128:	f3ef 8310 	mrs	r3, PRIMASK
 800212c:	60fb      	str	r3, [r7, #12]
  return(result);
 800212e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	2301      	movs	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4921      	ldr	r1, [pc, #132]	; (80021d0 <UART_CheckIdleState+0x14c>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800215a:	f3ef 8310 	mrs	r3, PRIMASK
 800215e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002160:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
 8002164:	2301      	movs	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f383 8810 	msr	PRIMASK, r3
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	438a      	bics	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002182:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f383 8810 	msr	PRIMASK, r3
}
 800218a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	2120      	movs	r1, #32
 8002192:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2278      	movs	r2, #120	; 0x78
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e011      	b.n	80021c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	2120      	movs	r1, #32
 80021ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2278      	movs	r2, #120	; 0x78
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b010      	add	sp, #64	; 0x40
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	01ffffff 	.word	0x01ffffff
 80021d0:	fffffedf 	.word	0xfffffedf

080021d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e4:	e04b      	b.n	800227e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	3301      	adds	r3, #1
 80021ea:	d048      	beq.n	800227e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe fc78 	bl	8000ae0 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <UART_WaitOnFlagUntilTimeout+0x2e>
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04b      	b.n	800229e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2204      	movs	r2, #4
 800220e:	4013      	ands	r3, r2
 8002210:	d035      	beq.n	800227e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2208      	movs	r2, #8
 800221a:	4013      	ands	r3, r2
 800221c:	2b08      	cmp	r3, #8
 800221e:	d111      	bne.n	8002244 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2208      	movs	r2, #8
 8002226:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f83c 	bl	80022a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2284      	movs	r2, #132	; 0x84
 8002234:	2108      	movs	r1, #8
 8002236:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2278      	movs	r2, #120	; 0x78
 800223c:	2100      	movs	r1, #0
 800223e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e02c      	b.n	800229e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	401a      	ands	r2, r3
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	429a      	cmp	r2, r3
 8002256:	d112      	bne.n	800227e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f81f 	bl	80022a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2284      	movs	r2, #132	; 0x84
 800226e:	2120      	movs	r1, #32
 8002270:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2278      	movs	r2, #120	; 0x78
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e00f      	b.n	800229e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	425a      	negs	r2, r3
 800228e:	4153      	adcs	r3, r2
 8002290:	b2db      	uxtb	r3, r3
 8002292:	001a      	movs	r2, r3
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d0a4      	beq.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b0:	f3ef 8310 	mrs	r3, PRIMASK
 80022b4:	617b      	str	r3, [r7, #20]
  return(result);
 80022b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f383 8810 	msr	PRIMASK, r3
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4926      	ldr	r1, [pc, #152]	; (800236c <UART_EndRxTransfer+0xc4>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f383 8810 	msr	PRIMASK, r3
}
 80022e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e2:	f3ef 8310 	mrs	r3, PRIMASK
 80022e6:	623b      	str	r3, [r7, #32]
  return(result);
 80022e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ea:	633b      	str	r3, [r7, #48]	; 0x30
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f383 8810 	msr	PRIMASK, r3
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	f383 8810 	msr	PRIMASK, r3
}
 8002312:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002318:	2b01      	cmp	r3, #1
 800231a:	d118      	bne.n	800234e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800231c:	f3ef 8310 	mrs	r3, PRIMASK
 8002320:	60bb      	str	r3, [r7, #8]
  return(result);
 8002322:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	2301      	movs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2110      	movs	r1, #16
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f383 8810 	msr	PRIMASK, r3
}
 800234c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	2120      	movs	r1, #32
 8002354:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b00e      	add	sp, #56	; 0x38
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	fffffedf 	.word	0xfffffedf

08002370 <__errno>:
 8002370:	4b01      	ldr	r3, [pc, #4]	; (8002378 <__errno+0x8>)
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	4770      	bx	lr
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	2000000c 	.word	0x2000000c

0800237c <__libc_init_array>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	2600      	movs	r6, #0
 8002380:	4d0c      	ldr	r5, [pc, #48]	; (80023b4 <__libc_init_array+0x38>)
 8002382:	4c0d      	ldr	r4, [pc, #52]	; (80023b8 <__libc_init_array+0x3c>)
 8002384:	1b64      	subs	r4, r4, r5
 8002386:	10a4      	asrs	r4, r4, #2
 8002388:	42a6      	cmp	r6, r4
 800238a:	d109      	bne.n	80023a0 <__libc_init_array+0x24>
 800238c:	2600      	movs	r6, #0
 800238e:	f000 fff9 	bl	8003384 <_init>
 8002392:	4d0a      	ldr	r5, [pc, #40]	; (80023bc <__libc_init_array+0x40>)
 8002394:	4c0a      	ldr	r4, [pc, #40]	; (80023c0 <__libc_init_array+0x44>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	42a6      	cmp	r6, r4
 800239c:	d105      	bne.n	80023aa <__libc_init_array+0x2e>
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	00b3      	lsls	r3, r6, #2
 80023a2:	58eb      	ldr	r3, [r5, r3]
 80023a4:	4798      	blx	r3
 80023a6:	3601      	adds	r6, #1
 80023a8:	e7ee      	b.n	8002388 <__libc_init_array+0xc>
 80023aa:	00b3      	lsls	r3, r6, #2
 80023ac:	58eb      	ldr	r3, [r5, r3]
 80023ae:	4798      	blx	r3
 80023b0:	3601      	adds	r6, #1
 80023b2:	e7f2      	b.n	800239a <__libc_init_array+0x1e>
 80023b4:	080034e4 	.word	0x080034e4
 80023b8:	080034e4 	.word	0x080034e4
 80023bc:	080034e4 	.word	0x080034e4
 80023c0:	080034e8 	.word	0x080034e8

080023c4 <memset>:
 80023c4:	0003      	movs	r3, r0
 80023c6:	1882      	adds	r2, r0, r2
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d100      	bne.n	80023ce <memset+0xa>
 80023cc:	4770      	bx	lr
 80023ce:	7019      	strb	r1, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	e7f9      	b.n	80023c8 <memset+0x4>

080023d4 <iprintf>:
 80023d4:	b40f      	push	{r0, r1, r2, r3}
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <iprintf+0x30>)
 80023d8:	b513      	push	{r0, r1, r4, lr}
 80023da:	681c      	ldr	r4, [r3, #0]
 80023dc:	2c00      	cmp	r4, #0
 80023de:	d005      	beq.n	80023ec <iprintf+0x18>
 80023e0:	69a3      	ldr	r3, [r4, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <iprintf+0x18>
 80023e6:	0020      	movs	r0, r4
 80023e8:	f000 f870 	bl	80024cc <__sinit>
 80023ec:	ab05      	add	r3, sp, #20
 80023ee:	0020      	movs	r0, r4
 80023f0:	9a04      	ldr	r2, [sp, #16]
 80023f2:	68a1      	ldr	r1, [r4, #8]
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	f000 f9cd 	bl	8002794 <_vfiprintf_r>
 80023fa:	bc16      	pop	{r1, r2, r4}
 80023fc:	bc08      	pop	{r3}
 80023fe:	b004      	add	sp, #16
 8002400:	4718      	bx	r3
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	2000000c 	.word	0x2000000c

08002408 <std>:
 8002408:	2300      	movs	r3, #0
 800240a:	b510      	push	{r4, lr}
 800240c:	0004      	movs	r4, r0
 800240e:	6003      	str	r3, [r0, #0]
 8002410:	6043      	str	r3, [r0, #4]
 8002412:	6083      	str	r3, [r0, #8]
 8002414:	8181      	strh	r1, [r0, #12]
 8002416:	6643      	str	r3, [r0, #100]	; 0x64
 8002418:	0019      	movs	r1, r3
 800241a:	81c2      	strh	r2, [r0, #14]
 800241c:	6103      	str	r3, [r0, #16]
 800241e:	6143      	str	r3, [r0, #20]
 8002420:	6183      	str	r3, [r0, #24]
 8002422:	2208      	movs	r2, #8
 8002424:	305c      	adds	r0, #92	; 0x5c
 8002426:	f7ff ffcd 	bl	80023c4 <memset>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <std+0x38>)
 800242c:	6224      	str	r4, [r4, #32]
 800242e:	6263      	str	r3, [r4, #36]	; 0x24
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <std+0x3c>)
 8002432:	62a3      	str	r3, [r4, #40]	; 0x28
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <std+0x40>)
 8002436:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <std+0x44>)
 800243a:	6323      	str	r3, [r4, #48]	; 0x30
 800243c:	bd10      	pop	{r4, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	08002d31 	.word	0x08002d31
 8002444:	08002d59 	.word	0x08002d59
 8002448:	08002d91 	.word	0x08002d91
 800244c:	08002dbd 	.word	0x08002dbd

08002450 <_cleanup_r>:
 8002450:	b510      	push	{r4, lr}
 8002452:	4902      	ldr	r1, [pc, #8]	; (800245c <_cleanup_r+0xc>)
 8002454:	f000 f8ba 	bl	80025cc <_fwalk_reent>
 8002458:	bd10      	pop	{r4, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	080030c9 	.word	0x080030c9

08002460 <__sfmoreglue>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	2568      	movs	r5, #104	; 0x68
 8002464:	1e4a      	subs	r2, r1, #1
 8002466:	4355      	muls	r5, r2
 8002468:	000e      	movs	r6, r1
 800246a:	0029      	movs	r1, r5
 800246c:	3174      	adds	r1, #116	; 0x74
 800246e:	f000 f8f3 	bl	8002658 <_malloc_r>
 8002472:	1e04      	subs	r4, r0, #0
 8002474:	d008      	beq.n	8002488 <__sfmoreglue+0x28>
 8002476:	2100      	movs	r1, #0
 8002478:	002a      	movs	r2, r5
 800247a:	6001      	str	r1, [r0, #0]
 800247c:	6046      	str	r6, [r0, #4]
 800247e:	300c      	adds	r0, #12
 8002480:	60a0      	str	r0, [r4, #8]
 8002482:	3268      	adds	r2, #104	; 0x68
 8002484:	f7ff ff9e 	bl	80023c4 <memset>
 8002488:	0020      	movs	r0, r4
 800248a:	bd70      	pop	{r4, r5, r6, pc}

0800248c <__sfp_lock_acquire>:
 800248c:	b510      	push	{r4, lr}
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <__sfp_lock_acquire+0xc>)
 8002490:	f000 f8bd 	bl	800260e <__retarget_lock_acquire_recursive>
 8002494:	bd10      	pop	{r4, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	20000121 	.word	0x20000121

0800249c <__sfp_lock_release>:
 800249c:	b510      	push	{r4, lr}
 800249e:	4802      	ldr	r0, [pc, #8]	; (80024a8 <__sfp_lock_release+0xc>)
 80024a0:	f000 f8b6 	bl	8002610 <__retarget_lock_release_recursive>
 80024a4:	bd10      	pop	{r4, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000121 	.word	0x20000121

080024ac <__sinit_lock_acquire>:
 80024ac:	b510      	push	{r4, lr}
 80024ae:	4802      	ldr	r0, [pc, #8]	; (80024b8 <__sinit_lock_acquire+0xc>)
 80024b0:	f000 f8ad 	bl	800260e <__retarget_lock_acquire_recursive>
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	20000122 	.word	0x20000122

080024bc <__sinit_lock_release>:
 80024bc:	b510      	push	{r4, lr}
 80024be:	4802      	ldr	r0, [pc, #8]	; (80024c8 <__sinit_lock_release+0xc>)
 80024c0:	f000 f8a6 	bl	8002610 <__retarget_lock_release_recursive>
 80024c4:	bd10      	pop	{r4, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	20000122 	.word	0x20000122

080024cc <__sinit>:
 80024cc:	b513      	push	{r0, r1, r4, lr}
 80024ce:	0004      	movs	r4, r0
 80024d0:	f7ff ffec 	bl	80024ac <__sinit_lock_acquire>
 80024d4:	69a3      	ldr	r3, [r4, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <__sinit+0x14>
 80024da:	f7ff ffef 	bl	80024bc <__sinit_lock_release>
 80024de:	bd13      	pop	{r0, r1, r4, pc}
 80024e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80024e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80024e4:	6523      	str	r3, [r4, #80]	; 0x50
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <__sinit+0x68>)
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <__sinit+0x6c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d101      	bne.n	80024f8 <__sinit+0x2c>
 80024f4:	2301      	movs	r3, #1
 80024f6:	61a3      	str	r3, [r4, #24]
 80024f8:	0020      	movs	r0, r4
 80024fa:	f000 f81f 	bl	800253c <__sfp>
 80024fe:	6060      	str	r0, [r4, #4]
 8002500:	0020      	movs	r0, r4
 8002502:	f000 f81b 	bl	800253c <__sfp>
 8002506:	60a0      	str	r0, [r4, #8]
 8002508:	0020      	movs	r0, r4
 800250a:	f000 f817 	bl	800253c <__sfp>
 800250e:	2200      	movs	r2, #0
 8002510:	2104      	movs	r1, #4
 8002512:	60e0      	str	r0, [r4, #12]
 8002514:	6860      	ldr	r0, [r4, #4]
 8002516:	f7ff ff77 	bl	8002408 <std>
 800251a:	2201      	movs	r2, #1
 800251c:	2109      	movs	r1, #9
 800251e:	68a0      	ldr	r0, [r4, #8]
 8002520:	f7ff ff72 	bl	8002408 <std>
 8002524:	2202      	movs	r2, #2
 8002526:	2112      	movs	r1, #18
 8002528:	68e0      	ldr	r0, [r4, #12]
 800252a:	f7ff ff6d 	bl	8002408 <std>
 800252e:	2301      	movs	r3, #1
 8002530:	61a3      	str	r3, [r4, #24]
 8002532:	e7d2      	b.n	80024da <__sinit+0xe>
 8002534:	0800344c 	.word	0x0800344c
 8002538:	08002451 	.word	0x08002451

0800253c <__sfp>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	0007      	movs	r7, r0
 8002540:	f7ff ffa4 	bl	800248c <__sfp_lock_acquire>
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <__sfp+0x88>)
 8002546:	681e      	ldr	r6, [r3, #0]
 8002548:	69b3      	ldr	r3, [r6, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <__sfp+0x18>
 800254e:	0030      	movs	r0, r6
 8002550:	f7ff ffbc 	bl	80024cc <__sinit>
 8002554:	3648      	adds	r6, #72	; 0x48
 8002556:	68b4      	ldr	r4, [r6, #8]
 8002558:	6873      	ldr	r3, [r6, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	d504      	bpl.n	8002568 <__sfp+0x2c>
 800255e:	6833      	ldr	r3, [r6, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <__sfp+0x6e>
 8002564:	6836      	ldr	r6, [r6, #0]
 8002566:	e7f6      	b.n	8002556 <__sfp+0x1a>
 8002568:	220c      	movs	r2, #12
 800256a:	5ea5      	ldrsh	r5, [r4, r2]
 800256c:	2d00      	cmp	r5, #0
 800256e:	d11a      	bne.n	80025a6 <__sfp+0x6a>
 8002570:	0020      	movs	r0, r4
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <__sfp+0x8c>)
 8002574:	3058      	adds	r0, #88	; 0x58
 8002576:	60e3      	str	r3, [r4, #12]
 8002578:	6665      	str	r5, [r4, #100]	; 0x64
 800257a:	f000 f847 	bl	800260c <__retarget_lock_init_recursive>
 800257e:	f7ff ff8d 	bl	800249c <__sfp_lock_release>
 8002582:	0020      	movs	r0, r4
 8002584:	2208      	movs	r2, #8
 8002586:	0029      	movs	r1, r5
 8002588:	6025      	str	r5, [r4, #0]
 800258a:	60a5      	str	r5, [r4, #8]
 800258c:	6065      	str	r5, [r4, #4]
 800258e:	6125      	str	r5, [r4, #16]
 8002590:	6165      	str	r5, [r4, #20]
 8002592:	61a5      	str	r5, [r4, #24]
 8002594:	305c      	adds	r0, #92	; 0x5c
 8002596:	f7ff ff15 	bl	80023c4 <memset>
 800259a:	6365      	str	r5, [r4, #52]	; 0x34
 800259c:	63a5      	str	r5, [r4, #56]	; 0x38
 800259e:	64a5      	str	r5, [r4, #72]	; 0x48
 80025a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80025a2:	0020      	movs	r0, r4
 80025a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025a6:	3468      	adds	r4, #104	; 0x68
 80025a8:	e7d7      	b.n	800255a <__sfp+0x1e>
 80025aa:	2104      	movs	r1, #4
 80025ac:	0038      	movs	r0, r7
 80025ae:	f7ff ff57 	bl	8002460 <__sfmoreglue>
 80025b2:	1e04      	subs	r4, r0, #0
 80025b4:	6030      	str	r0, [r6, #0]
 80025b6:	d1d5      	bne.n	8002564 <__sfp+0x28>
 80025b8:	f7ff ff70 	bl	800249c <__sfp_lock_release>
 80025bc:	230c      	movs	r3, #12
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	e7ef      	b.n	80025a2 <__sfp+0x66>
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	0800344c 	.word	0x0800344c
 80025c8:	ffff0001 	.word	0xffff0001

080025cc <_fwalk_reent>:
 80025cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ce:	0004      	movs	r4, r0
 80025d0:	0006      	movs	r6, r0
 80025d2:	2700      	movs	r7, #0
 80025d4:	9101      	str	r1, [sp, #4]
 80025d6:	3448      	adds	r4, #72	; 0x48
 80025d8:	6863      	ldr	r3, [r4, #4]
 80025da:	68a5      	ldr	r5, [r4, #8]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	9b00      	ldr	r3, [sp, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	d504      	bpl.n	80025f0 <_fwalk_reent+0x24>
 80025e6:	6824      	ldr	r4, [r4, #0]
 80025e8:	2c00      	cmp	r4, #0
 80025ea:	d1f5      	bne.n	80025d8 <_fwalk_reent+0xc>
 80025ec:	0038      	movs	r0, r7
 80025ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025f0:	89ab      	ldrh	r3, [r5, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d908      	bls.n	8002608 <_fwalk_reent+0x3c>
 80025f6:	220e      	movs	r2, #14
 80025f8:	5eab      	ldrsh	r3, [r5, r2]
 80025fa:	3301      	adds	r3, #1
 80025fc:	d004      	beq.n	8002608 <_fwalk_reent+0x3c>
 80025fe:	0029      	movs	r1, r5
 8002600:	0030      	movs	r0, r6
 8002602:	9b01      	ldr	r3, [sp, #4]
 8002604:	4798      	blx	r3
 8002606:	4307      	orrs	r7, r0
 8002608:	3568      	adds	r5, #104	; 0x68
 800260a:	e7e8      	b.n	80025de <_fwalk_reent+0x12>

0800260c <__retarget_lock_init_recursive>:
 800260c:	4770      	bx	lr

0800260e <__retarget_lock_acquire_recursive>:
 800260e:	4770      	bx	lr

08002610 <__retarget_lock_release_recursive>:
 8002610:	4770      	bx	lr
	...

08002614 <sbrk_aligned>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4e0f      	ldr	r6, [pc, #60]	; (8002654 <sbrk_aligned+0x40>)
 8002618:	000d      	movs	r5, r1
 800261a:	6831      	ldr	r1, [r6, #0]
 800261c:	0004      	movs	r4, r0
 800261e:	2900      	cmp	r1, #0
 8002620:	d102      	bne.n	8002628 <sbrk_aligned+0x14>
 8002622:	f000 fb73 	bl	8002d0c <_sbrk_r>
 8002626:	6030      	str	r0, [r6, #0]
 8002628:	0029      	movs	r1, r5
 800262a:	0020      	movs	r0, r4
 800262c:	f000 fb6e 	bl	8002d0c <_sbrk_r>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d00a      	beq.n	800264a <sbrk_aligned+0x36>
 8002634:	2303      	movs	r3, #3
 8002636:	1cc5      	adds	r5, r0, #3
 8002638:	439d      	bics	r5, r3
 800263a:	42a8      	cmp	r0, r5
 800263c:	d007      	beq.n	800264e <sbrk_aligned+0x3a>
 800263e:	1a29      	subs	r1, r5, r0
 8002640:	0020      	movs	r0, r4
 8002642:	f000 fb63 	bl	8002d0c <_sbrk_r>
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	d101      	bne.n	800264e <sbrk_aligned+0x3a>
 800264a:	2501      	movs	r5, #1
 800264c:	426d      	negs	r5, r5
 800264e:	0028      	movs	r0, r5
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	20000128 	.word	0x20000128

08002658 <_malloc_r>:
 8002658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800265a:	2203      	movs	r2, #3
 800265c:	1ccb      	adds	r3, r1, #3
 800265e:	4393      	bics	r3, r2
 8002660:	3308      	adds	r3, #8
 8002662:	0006      	movs	r6, r0
 8002664:	001f      	movs	r7, r3
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d232      	bcs.n	80026d0 <_malloc_r+0x78>
 800266a:	270c      	movs	r7, #12
 800266c:	42b9      	cmp	r1, r7
 800266e:	d831      	bhi.n	80026d4 <_malloc_r+0x7c>
 8002670:	0030      	movs	r0, r6
 8002672:	f000 fdf5 	bl	8003260 <__malloc_lock>
 8002676:	4d32      	ldr	r5, [pc, #200]	; (8002740 <_malloc_r+0xe8>)
 8002678:	682b      	ldr	r3, [r5, #0]
 800267a:	001c      	movs	r4, r3
 800267c:	2c00      	cmp	r4, #0
 800267e:	d12e      	bne.n	80026de <_malloc_r+0x86>
 8002680:	0039      	movs	r1, r7
 8002682:	0030      	movs	r0, r6
 8002684:	f7ff ffc6 	bl	8002614 <sbrk_aligned>
 8002688:	0004      	movs	r4, r0
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	d11e      	bne.n	80026cc <_malloc_r+0x74>
 800268e:	682c      	ldr	r4, [r5, #0]
 8002690:	0025      	movs	r5, r4
 8002692:	2d00      	cmp	r5, #0
 8002694:	d14a      	bne.n	800272c <_malloc_r+0xd4>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	0029      	movs	r1, r5
 800269a:	18e3      	adds	r3, r4, r3
 800269c:	0030      	movs	r0, r6
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	f000 fb34 	bl	8002d0c <_sbrk_r>
 80026a4:	9b01      	ldr	r3, [sp, #4]
 80026a6:	4283      	cmp	r3, r0
 80026a8:	d143      	bne.n	8002732 <_malloc_r+0xda>
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	3703      	adds	r7, #3
 80026ae:	1aff      	subs	r7, r7, r3
 80026b0:	2303      	movs	r3, #3
 80026b2:	439f      	bics	r7, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	2f0c      	cmp	r7, #12
 80026b8:	d200      	bcs.n	80026bc <_malloc_r+0x64>
 80026ba:	270c      	movs	r7, #12
 80026bc:	0039      	movs	r1, r7
 80026be:	0030      	movs	r0, r6
 80026c0:	f7ff ffa8 	bl	8002614 <sbrk_aligned>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d034      	beq.n	8002732 <_malloc_r+0xda>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	19df      	adds	r7, r3, r7
 80026cc:	6027      	str	r7, [r4, #0]
 80026ce:	e013      	b.n	80026f8 <_malloc_r+0xa0>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	dacb      	bge.n	800266c <_malloc_r+0x14>
 80026d4:	230c      	movs	r3, #12
 80026d6:	2500      	movs	r5, #0
 80026d8:	6033      	str	r3, [r6, #0]
 80026da:	0028      	movs	r0, r5
 80026dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	1bd1      	subs	r1, r2, r7
 80026e2:	d420      	bmi.n	8002726 <_malloc_r+0xce>
 80026e4:	290b      	cmp	r1, #11
 80026e6:	d917      	bls.n	8002718 <_malloc_r+0xc0>
 80026e8:	19e2      	adds	r2, r4, r7
 80026ea:	6027      	str	r7, [r4, #0]
 80026ec:	42a3      	cmp	r3, r4
 80026ee:	d111      	bne.n	8002714 <_malloc_r+0xbc>
 80026f0:	602a      	str	r2, [r5, #0]
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	6011      	str	r1, [r2, #0]
 80026f6:	6053      	str	r3, [r2, #4]
 80026f8:	0030      	movs	r0, r6
 80026fa:	0025      	movs	r5, r4
 80026fc:	f000 fdb8 	bl	8003270 <__malloc_unlock>
 8002700:	2207      	movs	r2, #7
 8002702:	350b      	adds	r5, #11
 8002704:	1d23      	adds	r3, r4, #4
 8002706:	4395      	bics	r5, r2
 8002708:	1aea      	subs	r2, r5, r3
 800270a:	429d      	cmp	r5, r3
 800270c:	d0e5      	beq.n	80026da <_malloc_r+0x82>
 800270e:	1b5b      	subs	r3, r3, r5
 8002710:	50a3      	str	r3, [r4, r2]
 8002712:	e7e2      	b.n	80026da <_malloc_r+0x82>
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	e7ec      	b.n	80026f2 <_malloc_r+0x9a>
 8002718:	6862      	ldr	r2, [r4, #4]
 800271a:	42a3      	cmp	r3, r4
 800271c:	d101      	bne.n	8002722 <_malloc_r+0xca>
 800271e:	602a      	str	r2, [r5, #0]
 8002720:	e7ea      	b.n	80026f8 <_malloc_r+0xa0>
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	e7e8      	b.n	80026f8 <_malloc_r+0xa0>
 8002726:	0023      	movs	r3, r4
 8002728:	6864      	ldr	r4, [r4, #4]
 800272a:	e7a7      	b.n	800267c <_malloc_r+0x24>
 800272c:	002c      	movs	r4, r5
 800272e:	686d      	ldr	r5, [r5, #4]
 8002730:	e7af      	b.n	8002692 <_malloc_r+0x3a>
 8002732:	230c      	movs	r3, #12
 8002734:	0030      	movs	r0, r6
 8002736:	6033      	str	r3, [r6, #0]
 8002738:	f000 fd9a 	bl	8003270 <__malloc_unlock>
 800273c:	e7cd      	b.n	80026da <_malloc_r+0x82>
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	20000124 	.word	0x20000124

08002744 <__sfputc_r>:
 8002744:	6893      	ldr	r3, [r2, #8]
 8002746:	b510      	push	{r4, lr}
 8002748:	3b01      	subs	r3, #1
 800274a:	6093      	str	r3, [r2, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da04      	bge.n	800275a <__sfputc_r+0x16>
 8002750:	6994      	ldr	r4, [r2, #24]
 8002752:	42a3      	cmp	r3, r4
 8002754:	db07      	blt.n	8002766 <__sfputc_r+0x22>
 8002756:	290a      	cmp	r1, #10
 8002758:	d005      	beq.n	8002766 <__sfputc_r+0x22>
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	1c58      	adds	r0, r3, #1
 800275e:	6010      	str	r0, [r2, #0]
 8002760:	7019      	strb	r1, [r3, #0]
 8002762:	0008      	movs	r0, r1
 8002764:	bd10      	pop	{r4, pc}
 8002766:	f000 fb2f 	bl	8002dc8 <__swbuf_r>
 800276a:	0001      	movs	r1, r0
 800276c:	e7f9      	b.n	8002762 <__sfputc_r+0x1e>

0800276e <__sfputs_r>:
 800276e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002770:	0006      	movs	r6, r0
 8002772:	000f      	movs	r7, r1
 8002774:	0014      	movs	r4, r2
 8002776:	18d5      	adds	r5, r2, r3
 8002778:	42ac      	cmp	r4, r5
 800277a:	d101      	bne.n	8002780 <__sfputs_r+0x12>
 800277c:	2000      	movs	r0, #0
 800277e:	e007      	b.n	8002790 <__sfputs_r+0x22>
 8002780:	7821      	ldrb	r1, [r4, #0]
 8002782:	003a      	movs	r2, r7
 8002784:	0030      	movs	r0, r6
 8002786:	f7ff ffdd 	bl	8002744 <__sfputc_r>
 800278a:	3401      	adds	r4, #1
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d1f3      	bne.n	8002778 <__sfputs_r+0xa>
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002794 <_vfiprintf_r>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b0a1      	sub	sp, #132	; 0x84
 8002798:	0006      	movs	r6, r0
 800279a:	000c      	movs	r4, r1
 800279c:	001f      	movs	r7, r3
 800279e:	9203      	str	r2, [sp, #12]
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d004      	beq.n	80027ae <_vfiprintf_r+0x1a>
 80027a4:	6983      	ldr	r3, [r0, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <_vfiprintf_r+0x1a>
 80027aa:	f7ff fe8f 	bl	80024cc <__sinit>
 80027ae:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <_vfiprintf_r+0x254>)
 80027b0:	429c      	cmp	r4, r3
 80027b2:	d11c      	bne.n	80027ee <_vfiprintf_r+0x5a>
 80027b4:	6874      	ldr	r4, [r6, #4]
 80027b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027b8:	07db      	lsls	r3, r3, #31
 80027ba:	d405      	bmi.n	80027c8 <_vfiprintf_r+0x34>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	059b      	lsls	r3, r3, #22
 80027c0:	d402      	bmi.n	80027c8 <_vfiprintf_r+0x34>
 80027c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027c4:	f7ff ff23 	bl	800260e <__retarget_lock_acquire_recursive>
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	071b      	lsls	r3, r3, #28
 80027cc:	d502      	bpl.n	80027d4 <_vfiprintf_r+0x40>
 80027ce:	6923      	ldr	r3, [r4, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11d      	bne.n	8002810 <_vfiprintf_r+0x7c>
 80027d4:	0021      	movs	r1, r4
 80027d6:	0030      	movs	r0, r6
 80027d8:	f000 fb60 	bl	8002e9c <__swsetup_r>
 80027dc:	2800      	cmp	r0, #0
 80027de:	d017      	beq.n	8002810 <_vfiprintf_r+0x7c>
 80027e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027e2:	07db      	lsls	r3, r3, #31
 80027e4:	d50d      	bpl.n	8002802 <_vfiprintf_r+0x6e>
 80027e6:	2001      	movs	r0, #1
 80027e8:	4240      	negs	r0, r0
 80027ea:	b021      	add	sp, #132	; 0x84
 80027ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ee:	4b7f      	ldr	r3, [pc, #508]	; (80029ec <_vfiprintf_r+0x258>)
 80027f0:	429c      	cmp	r4, r3
 80027f2:	d101      	bne.n	80027f8 <_vfiprintf_r+0x64>
 80027f4:	68b4      	ldr	r4, [r6, #8]
 80027f6:	e7de      	b.n	80027b6 <_vfiprintf_r+0x22>
 80027f8:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <_vfiprintf_r+0x25c>)
 80027fa:	429c      	cmp	r4, r3
 80027fc:	d1db      	bne.n	80027b6 <_vfiprintf_r+0x22>
 80027fe:	68f4      	ldr	r4, [r6, #12]
 8002800:	e7d9      	b.n	80027b6 <_vfiprintf_r+0x22>
 8002802:	89a3      	ldrh	r3, [r4, #12]
 8002804:	059b      	lsls	r3, r3, #22
 8002806:	d4ee      	bmi.n	80027e6 <_vfiprintf_r+0x52>
 8002808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800280a:	f7ff ff01 	bl	8002610 <__retarget_lock_release_recursive>
 800280e:	e7ea      	b.n	80027e6 <_vfiprintf_r+0x52>
 8002810:	2300      	movs	r3, #0
 8002812:	ad08      	add	r5, sp, #32
 8002814:	616b      	str	r3, [r5, #20]
 8002816:	3320      	adds	r3, #32
 8002818:	766b      	strb	r3, [r5, #25]
 800281a:	3310      	adds	r3, #16
 800281c:	76ab      	strb	r3, [r5, #26]
 800281e:	9707      	str	r7, [sp, #28]
 8002820:	9f03      	ldr	r7, [sp, #12]
 8002822:	783b      	ldrb	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <_vfiprintf_r+0x98>
 8002828:	2b25      	cmp	r3, #37	; 0x25
 800282a:	d14e      	bne.n	80028ca <_vfiprintf_r+0x136>
 800282c:	9b03      	ldr	r3, [sp, #12]
 800282e:	1afb      	subs	r3, r7, r3
 8002830:	9305      	str	r3, [sp, #20]
 8002832:	9b03      	ldr	r3, [sp, #12]
 8002834:	429f      	cmp	r7, r3
 8002836:	d00d      	beq.n	8002854 <_vfiprintf_r+0xc0>
 8002838:	9b05      	ldr	r3, [sp, #20]
 800283a:	0021      	movs	r1, r4
 800283c:	0030      	movs	r0, r6
 800283e:	9a03      	ldr	r2, [sp, #12]
 8002840:	f7ff ff95 	bl	800276e <__sfputs_r>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	d100      	bne.n	800284a <_vfiprintf_r+0xb6>
 8002848:	e0b5      	b.n	80029b6 <_vfiprintf_r+0x222>
 800284a:	696a      	ldr	r2, [r5, #20]
 800284c:	9b05      	ldr	r3, [sp, #20]
 800284e:	4694      	mov	ip, r2
 8002850:	4463      	add	r3, ip
 8002852:	616b      	str	r3, [r5, #20]
 8002854:	783b      	ldrb	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d100      	bne.n	800285c <_vfiprintf_r+0xc8>
 800285a:	e0ac      	b.n	80029b6 <_vfiprintf_r+0x222>
 800285c:	2201      	movs	r2, #1
 800285e:	1c7b      	adds	r3, r7, #1
 8002860:	9303      	str	r3, [sp, #12]
 8002862:	2300      	movs	r3, #0
 8002864:	4252      	negs	r2, r2
 8002866:	606a      	str	r2, [r5, #4]
 8002868:	a904      	add	r1, sp, #16
 800286a:	3254      	adds	r2, #84	; 0x54
 800286c:	1852      	adds	r2, r2, r1
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	60eb      	str	r3, [r5, #12]
 8002872:	60ab      	str	r3, [r5, #8]
 8002874:	7013      	strb	r3, [r2, #0]
 8002876:	65ab      	str	r3, [r5, #88]	; 0x58
 8002878:	9b03      	ldr	r3, [sp, #12]
 800287a:	2205      	movs	r2, #5
 800287c:	7819      	ldrb	r1, [r3, #0]
 800287e:	485d      	ldr	r0, [pc, #372]	; (80029f4 <_vfiprintf_r+0x260>)
 8002880:	f000 fce2 	bl	8003248 <memchr>
 8002884:	9b03      	ldr	r3, [sp, #12]
 8002886:	1c5f      	adds	r7, r3, #1
 8002888:	2800      	cmp	r0, #0
 800288a:	d120      	bne.n	80028ce <_vfiprintf_r+0x13a>
 800288c:	682a      	ldr	r2, [r5, #0]
 800288e:	06d3      	lsls	r3, r2, #27
 8002890:	d504      	bpl.n	800289c <_vfiprintf_r+0x108>
 8002892:	2353      	movs	r3, #83	; 0x53
 8002894:	a904      	add	r1, sp, #16
 8002896:	185b      	adds	r3, r3, r1
 8002898:	2120      	movs	r1, #32
 800289a:	7019      	strb	r1, [r3, #0]
 800289c:	0713      	lsls	r3, r2, #28
 800289e:	d504      	bpl.n	80028aa <_vfiprintf_r+0x116>
 80028a0:	2353      	movs	r3, #83	; 0x53
 80028a2:	a904      	add	r1, sp, #16
 80028a4:	185b      	adds	r3, r3, r1
 80028a6:	212b      	movs	r1, #43	; 0x2b
 80028a8:	7019      	strb	r1, [r3, #0]
 80028aa:	9b03      	ldr	r3, [sp, #12]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b2a      	cmp	r3, #42	; 0x2a
 80028b0:	d016      	beq.n	80028e0 <_vfiprintf_r+0x14c>
 80028b2:	2100      	movs	r1, #0
 80028b4:	68eb      	ldr	r3, [r5, #12]
 80028b6:	9f03      	ldr	r7, [sp, #12]
 80028b8:	783a      	ldrb	r2, [r7, #0]
 80028ba:	1c78      	adds	r0, r7, #1
 80028bc:	3a30      	subs	r2, #48	; 0x30
 80028be:	4684      	mov	ip, r0
 80028c0:	2a09      	cmp	r2, #9
 80028c2:	d94f      	bls.n	8002964 <_vfiprintf_r+0x1d0>
 80028c4:	2900      	cmp	r1, #0
 80028c6:	d111      	bne.n	80028ec <_vfiprintf_r+0x158>
 80028c8:	e017      	b.n	80028fa <_vfiprintf_r+0x166>
 80028ca:	3701      	adds	r7, #1
 80028cc:	e7a9      	b.n	8002822 <_vfiprintf_r+0x8e>
 80028ce:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <_vfiprintf_r+0x260>)
 80028d0:	682a      	ldr	r2, [r5, #0]
 80028d2:	1ac0      	subs	r0, r0, r3
 80028d4:	2301      	movs	r3, #1
 80028d6:	4083      	lsls	r3, r0
 80028d8:	4313      	orrs	r3, r2
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	9703      	str	r7, [sp, #12]
 80028de:	e7cb      	b.n	8002878 <_vfiprintf_r+0xe4>
 80028e0:	9b07      	ldr	r3, [sp, #28]
 80028e2:	1d19      	adds	r1, r3, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	9107      	str	r1, [sp, #28]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db01      	blt.n	80028f0 <_vfiprintf_r+0x15c>
 80028ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80028ee:	e004      	b.n	80028fa <_vfiprintf_r+0x166>
 80028f0:	425b      	negs	r3, r3
 80028f2:	60eb      	str	r3, [r5, #12]
 80028f4:	2302      	movs	r3, #2
 80028f6:	4313      	orrs	r3, r2
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	783b      	ldrb	r3, [r7, #0]
 80028fc:	2b2e      	cmp	r3, #46	; 0x2e
 80028fe:	d10a      	bne.n	8002916 <_vfiprintf_r+0x182>
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b2a      	cmp	r3, #42	; 0x2a
 8002904:	d137      	bne.n	8002976 <_vfiprintf_r+0x1e2>
 8002906:	9b07      	ldr	r3, [sp, #28]
 8002908:	3702      	adds	r7, #2
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	9207      	str	r2, [sp, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db2d      	blt.n	8002970 <_vfiprintf_r+0x1dc>
 8002914:	9309      	str	r3, [sp, #36]	; 0x24
 8002916:	2203      	movs	r2, #3
 8002918:	7839      	ldrb	r1, [r7, #0]
 800291a:	4837      	ldr	r0, [pc, #220]	; (80029f8 <_vfiprintf_r+0x264>)
 800291c:	f000 fc94 	bl	8003248 <memchr>
 8002920:	2800      	cmp	r0, #0
 8002922:	d007      	beq.n	8002934 <_vfiprintf_r+0x1a0>
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <_vfiprintf_r+0x264>)
 8002926:	682a      	ldr	r2, [r5, #0]
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	2340      	movs	r3, #64	; 0x40
 800292c:	4083      	lsls	r3, r0
 800292e:	4313      	orrs	r3, r2
 8002930:	3701      	adds	r7, #1
 8002932:	602b      	str	r3, [r5, #0]
 8002934:	7839      	ldrb	r1, [r7, #0]
 8002936:	1c7b      	adds	r3, r7, #1
 8002938:	2206      	movs	r2, #6
 800293a:	4830      	ldr	r0, [pc, #192]	; (80029fc <_vfiprintf_r+0x268>)
 800293c:	9303      	str	r3, [sp, #12]
 800293e:	7629      	strb	r1, [r5, #24]
 8002940:	f000 fc82 	bl	8003248 <memchr>
 8002944:	2800      	cmp	r0, #0
 8002946:	d045      	beq.n	80029d4 <_vfiprintf_r+0x240>
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <_vfiprintf_r+0x26c>)
 800294a:	2b00      	cmp	r3, #0
 800294c:	d127      	bne.n	800299e <_vfiprintf_r+0x20a>
 800294e:	2207      	movs	r2, #7
 8002950:	9b07      	ldr	r3, [sp, #28]
 8002952:	3307      	adds	r3, #7
 8002954:	4393      	bics	r3, r2
 8002956:	3308      	adds	r3, #8
 8002958:	9307      	str	r3, [sp, #28]
 800295a:	696b      	ldr	r3, [r5, #20]
 800295c:	9a04      	ldr	r2, [sp, #16]
 800295e:	189b      	adds	r3, r3, r2
 8002960:	616b      	str	r3, [r5, #20]
 8002962:	e75d      	b.n	8002820 <_vfiprintf_r+0x8c>
 8002964:	210a      	movs	r1, #10
 8002966:	434b      	muls	r3, r1
 8002968:	4667      	mov	r7, ip
 800296a:	189b      	adds	r3, r3, r2
 800296c:	3909      	subs	r1, #9
 800296e:	e7a3      	b.n	80028b8 <_vfiprintf_r+0x124>
 8002970:	2301      	movs	r3, #1
 8002972:	425b      	negs	r3, r3
 8002974:	e7ce      	b.n	8002914 <_vfiprintf_r+0x180>
 8002976:	2300      	movs	r3, #0
 8002978:	001a      	movs	r2, r3
 800297a:	3701      	adds	r7, #1
 800297c:	606b      	str	r3, [r5, #4]
 800297e:	7839      	ldrb	r1, [r7, #0]
 8002980:	1c78      	adds	r0, r7, #1
 8002982:	3930      	subs	r1, #48	; 0x30
 8002984:	4684      	mov	ip, r0
 8002986:	2909      	cmp	r1, #9
 8002988:	d903      	bls.n	8002992 <_vfiprintf_r+0x1fe>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0c3      	beq.n	8002916 <_vfiprintf_r+0x182>
 800298e:	9209      	str	r2, [sp, #36]	; 0x24
 8002990:	e7c1      	b.n	8002916 <_vfiprintf_r+0x182>
 8002992:	230a      	movs	r3, #10
 8002994:	435a      	muls	r2, r3
 8002996:	4667      	mov	r7, ip
 8002998:	1852      	adds	r2, r2, r1
 800299a:	3b09      	subs	r3, #9
 800299c:	e7ef      	b.n	800297e <_vfiprintf_r+0x1ea>
 800299e:	ab07      	add	r3, sp, #28
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	0022      	movs	r2, r4
 80029a4:	0029      	movs	r1, r5
 80029a6:	0030      	movs	r0, r6
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <_vfiprintf_r+0x270>)
 80029aa:	e000      	b.n	80029ae <_vfiprintf_r+0x21a>
 80029ac:	bf00      	nop
 80029ae:	9004      	str	r0, [sp, #16]
 80029b0:	9b04      	ldr	r3, [sp, #16]
 80029b2:	3301      	adds	r3, #1
 80029b4:	d1d1      	bne.n	800295a <_vfiprintf_r+0x1c6>
 80029b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029b8:	07db      	lsls	r3, r3, #31
 80029ba:	d405      	bmi.n	80029c8 <_vfiprintf_r+0x234>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	059b      	lsls	r3, r3, #22
 80029c0:	d402      	bmi.n	80029c8 <_vfiprintf_r+0x234>
 80029c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029c4:	f7ff fe24 	bl	8002610 <__retarget_lock_release_recursive>
 80029c8:	89a3      	ldrh	r3, [r4, #12]
 80029ca:	065b      	lsls	r3, r3, #25
 80029cc:	d500      	bpl.n	80029d0 <_vfiprintf_r+0x23c>
 80029ce:	e70a      	b.n	80027e6 <_vfiprintf_r+0x52>
 80029d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80029d2:	e70a      	b.n	80027ea <_vfiprintf_r+0x56>
 80029d4:	ab07      	add	r3, sp, #28
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	0022      	movs	r2, r4
 80029da:	0029      	movs	r1, r5
 80029dc:	0030      	movs	r0, r6
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <_vfiprintf_r+0x270>)
 80029e0:	f000 f882 	bl	8002ae8 <_printf_i>
 80029e4:	e7e3      	b.n	80029ae <_vfiprintf_r+0x21a>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	08003470 	.word	0x08003470
 80029ec:	08003490 	.word	0x08003490
 80029f0:	08003450 	.word	0x08003450
 80029f4:	080034b0 	.word	0x080034b0
 80029f8:	080034b6 	.word	0x080034b6
 80029fc:	080034ba 	.word	0x080034ba
 8002a00:	00000000 	.word	0x00000000
 8002a04:	0800276f 	.word	0x0800276f

08002a08 <_printf_common>:
 8002a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a0a:	0015      	movs	r5, r2
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	688a      	ldr	r2, [r1, #8]
 8002a10:	690b      	ldr	r3, [r1, #16]
 8002a12:	000c      	movs	r4, r1
 8002a14:	9000      	str	r0, [sp, #0]
 8002a16:	4293      	cmp	r3, r2
 8002a18:	da00      	bge.n	8002a1c <_printf_common+0x14>
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	3243      	adds	r2, #67	; 0x43
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	2a00      	cmp	r2, #0
 8002a26:	d001      	beq.n	8002a2c <_printf_common+0x24>
 8002a28:	3301      	adds	r3, #1
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	d502      	bpl.n	8002a38 <_printf_common+0x30>
 8002a32:	682b      	ldr	r3, [r5, #0]
 8002a34:	3302      	adds	r3, #2
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	6822      	ldr	r2, [r4, #0]
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	0017      	movs	r7, r2
 8002a3e:	401f      	ands	r7, r3
 8002a40:	421a      	tst	r2, r3
 8002a42:	d027      	beq.n	8002a94 <_printf_common+0x8c>
 8002a44:	0023      	movs	r3, r4
 8002a46:	3343      	adds	r3, #67	; 0x43
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	4193      	sbcs	r3, r2
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	0692      	lsls	r2, r2, #26
 8002a52:	d430      	bmi.n	8002ab6 <_printf_common+0xae>
 8002a54:	0022      	movs	r2, r4
 8002a56:	9901      	ldr	r1, [sp, #4]
 8002a58:	9800      	ldr	r0, [sp, #0]
 8002a5a:	9e08      	ldr	r6, [sp, #32]
 8002a5c:	3243      	adds	r2, #67	; 0x43
 8002a5e:	47b0      	blx	r6
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d025      	beq.n	8002ab0 <_printf_common+0xa8>
 8002a64:	2306      	movs	r3, #6
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	682a      	ldr	r2, [r5, #0]
 8002a6a:	68e1      	ldr	r1, [r4, #12]
 8002a6c:	2500      	movs	r5, #0
 8002a6e:	4003      	ands	r3, r0
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d103      	bne.n	8002a7c <_printf_common+0x74>
 8002a74:	1a8d      	subs	r5, r1, r2
 8002a76:	43eb      	mvns	r3, r5
 8002a78:	17db      	asrs	r3, r3, #31
 8002a7a:	401d      	ands	r5, r3
 8002a7c:	68a3      	ldr	r3, [r4, #8]
 8002a7e:	6922      	ldr	r2, [r4, #16]
 8002a80:	4293      	cmp	r3, r2
 8002a82:	dd01      	ble.n	8002a88 <_printf_common+0x80>
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	18ed      	adds	r5, r5, r3
 8002a88:	2700      	movs	r7, #0
 8002a8a:	42bd      	cmp	r5, r7
 8002a8c:	d120      	bne.n	8002ad0 <_printf_common+0xc8>
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e010      	b.n	8002ab4 <_printf_common+0xac>
 8002a92:	3701      	adds	r7, #1
 8002a94:	68e3      	ldr	r3, [r4, #12]
 8002a96:	682a      	ldr	r2, [r5, #0]
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	42bb      	cmp	r3, r7
 8002a9c:	ddd2      	ble.n	8002a44 <_printf_common+0x3c>
 8002a9e:	0022      	movs	r2, r4
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9901      	ldr	r1, [sp, #4]
 8002aa4:	9800      	ldr	r0, [sp, #0]
 8002aa6:	9e08      	ldr	r6, [sp, #32]
 8002aa8:	3219      	adds	r2, #25
 8002aaa:	47b0      	blx	r6
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d1f0      	bne.n	8002a92 <_printf_common+0x8a>
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	4240      	negs	r0, r0
 8002ab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ab6:	2030      	movs	r0, #48	; 0x30
 8002ab8:	18e1      	adds	r1, r4, r3
 8002aba:	3143      	adds	r1, #67	; 0x43
 8002abc:	7008      	strb	r0, [r1, #0]
 8002abe:	0021      	movs	r1, r4
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	3145      	adds	r1, #69	; 0x45
 8002ac4:	7809      	ldrb	r1, [r1, #0]
 8002ac6:	18a2      	adds	r2, r4, r2
 8002ac8:	3243      	adds	r2, #67	; 0x43
 8002aca:	3302      	adds	r3, #2
 8002acc:	7011      	strb	r1, [r2, #0]
 8002ace:	e7c1      	b.n	8002a54 <_printf_common+0x4c>
 8002ad0:	0022      	movs	r2, r4
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	9901      	ldr	r1, [sp, #4]
 8002ad6:	9800      	ldr	r0, [sp, #0]
 8002ad8:	9e08      	ldr	r6, [sp, #32]
 8002ada:	321a      	adds	r2, #26
 8002adc:	47b0      	blx	r6
 8002ade:	1c43      	adds	r3, r0, #1
 8002ae0:	d0e6      	beq.n	8002ab0 <_printf_common+0xa8>
 8002ae2:	3701      	adds	r7, #1
 8002ae4:	e7d1      	b.n	8002a8a <_printf_common+0x82>
	...

08002ae8 <_printf_i>:
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b08b      	sub	sp, #44	; 0x2c
 8002aec:	9206      	str	r2, [sp, #24]
 8002aee:	000a      	movs	r2, r1
 8002af0:	3243      	adds	r2, #67	; 0x43
 8002af2:	9307      	str	r3, [sp, #28]
 8002af4:	9005      	str	r0, [sp, #20]
 8002af6:	9204      	str	r2, [sp, #16]
 8002af8:	7e0a      	ldrb	r2, [r1, #24]
 8002afa:	000c      	movs	r4, r1
 8002afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002afe:	2a78      	cmp	r2, #120	; 0x78
 8002b00:	d807      	bhi.n	8002b12 <_printf_i+0x2a>
 8002b02:	2a62      	cmp	r2, #98	; 0x62
 8002b04:	d809      	bhi.n	8002b1a <_printf_i+0x32>
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	d100      	bne.n	8002b0c <_printf_i+0x24>
 8002b0a:	e0c1      	b.n	8002c90 <_printf_i+0x1a8>
 8002b0c:	2a58      	cmp	r2, #88	; 0x58
 8002b0e:	d100      	bne.n	8002b12 <_printf_i+0x2a>
 8002b10:	e08c      	b.n	8002c2c <_printf_i+0x144>
 8002b12:	0026      	movs	r6, r4
 8002b14:	3642      	adds	r6, #66	; 0x42
 8002b16:	7032      	strb	r2, [r6, #0]
 8002b18:	e022      	b.n	8002b60 <_printf_i+0x78>
 8002b1a:	0010      	movs	r0, r2
 8002b1c:	3863      	subs	r0, #99	; 0x63
 8002b1e:	2815      	cmp	r0, #21
 8002b20:	d8f7      	bhi.n	8002b12 <_printf_i+0x2a>
 8002b22:	f7fd faf1 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b26:	0016      	.short	0x0016
 8002b28:	fff6001f 	.word	0xfff6001f
 8002b2c:	fff6fff6 	.word	0xfff6fff6
 8002b30:	001ffff6 	.word	0x001ffff6
 8002b34:	fff6fff6 	.word	0xfff6fff6
 8002b38:	fff6fff6 	.word	0xfff6fff6
 8002b3c:	003600a8 	.word	0x003600a8
 8002b40:	fff6009a 	.word	0xfff6009a
 8002b44:	00b9fff6 	.word	0x00b9fff6
 8002b48:	0036fff6 	.word	0x0036fff6
 8002b4c:	fff6fff6 	.word	0xfff6fff6
 8002b50:	009e      	.short	0x009e
 8002b52:	0026      	movs	r6, r4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	3642      	adds	r6, #66	; 0x42
 8002b58:	1d11      	adds	r1, r2, #4
 8002b5a:	6019      	str	r1, [r3, #0]
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	7033      	strb	r3, [r6, #0]
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0a7      	b.n	8002cb4 <_printf_i+0x1cc>
 8002b64:	6808      	ldr	r0, [r1, #0]
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	1d0a      	adds	r2, r1, #4
 8002b6a:	0605      	lsls	r5, r0, #24
 8002b6c:	d50b      	bpl.n	8002b86 <_printf_i+0x9e>
 8002b6e:	680d      	ldr	r5, [r1, #0]
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	2d00      	cmp	r5, #0
 8002b74:	da03      	bge.n	8002b7e <_printf_i+0x96>
 8002b76:	232d      	movs	r3, #45	; 0x2d
 8002b78:	9a04      	ldr	r2, [sp, #16]
 8002b7a:	426d      	negs	r5, r5
 8002b7c:	7013      	strb	r3, [r2, #0]
 8002b7e:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <_printf_i+0x21c>)
 8002b80:	270a      	movs	r7, #10
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	e01b      	b.n	8002bbe <_printf_i+0xd6>
 8002b86:	680d      	ldr	r5, [r1, #0]
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	0641      	lsls	r1, r0, #25
 8002b8c:	d5f1      	bpl.n	8002b72 <_printf_i+0x8a>
 8002b8e:	b22d      	sxth	r5, r5
 8002b90:	e7ef      	b.n	8002b72 <_printf_i+0x8a>
 8002b92:	680d      	ldr	r5, [r1, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	1d08      	adds	r0, r1, #4
 8002b98:	6018      	str	r0, [r3, #0]
 8002b9a:	062e      	lsls	r6, r5, #24
 8002b9c:	d501      	bpl.n	8002ba2 <_printf_i+0xba>
 8002b9e:	680d      	ldr	r5, [r1, #0]
 8002ba0:	e003      	b.n	8002baa <_printf_i+0xc2>
 8002ba2:	066d      	lsls	r5, r5, #25
 8002ba4:	d5fb      	bpl.n	8002b9e <_printf_i+0xb6>
 8002ba6:	680d      	ldr	r5, [r1, #0]
 8002ba8:	b2ad      	uxth	r5, r5
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <_printf_i+0x21c>)
 8002bac:	2708      	movs	r7, #8
 8002bae:	9303      	str	r3, [sp, #12]
 8002bb0:	2a6f      	cmp	r2, #111	; 0x6f
 8002bb2:	d000      	beq.n	8002bb6 <_printf_i+0xce>
 8002bb4:	3702      	adds	r7, #2
 8002bb6:	0023      	movs	r3, r4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	3343      	adds	r3, #67	; 0x43
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	6863      	ldr	r3, [r4, #4]
 8002bc0:	60a3      	str	r3, [r4, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db03      	blt.n	8002bce <_printf_i+0xe6>
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	6821      	ldr	r1, [r4, #0]
 8002bca:	4391      	bics	r1, r2
 8002bcc:	6021      	str	r1, [r4, #0]
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	d102      	bne.n	8002bd8 <_printf_i+0xf0>
 8002bd2:	9e04      	ldr	r6, [sp, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <_printf_i+0x10a>
 8002bd8:	9e04      	ldr	r6, [sp, #16]
 8002bda:	0028      	movs	r0, r5
 8002bdc:	0039      	movs	r1, r7
 8002bde:	f7fd fb23 	bl	8000228 <__aeabi_uidivmod>
 8002be2:	9b03      	ldr	r3, [sp, #12]
 8002be4:	3e01      	subs	r6, #1
 8002be6:	5c5b      	ldrb	r3, [r3, r1]
 8002be8:	7033      	strb	r3, [r6, #0]
 8002bea:	002b      	movs	r3, r5
 8002bec:	0005      	movs	r5, r0
 8002bee:	429f      	cmp	r7, r3
 8002bf0:	d9f3      	bls.n	8002bda <_printf_i+0xf2>
 8002bf2:	2f08      	cmp	r7, #8
 8002bf4:	d109      	bne.n	8002c0a <_printf_i+0x122>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	07db      	lsls	r3, r3, #31
 8002bfa:	d506      	bpl.n	8002c0a <_printf_i+0x122>
 8002bfc:	6863      	ldr	r3, [r4, #4]
 8002bfe:	6922      	ldr	r2, [r4, #16]
 8002c00:	4293      	cmp	r3, r2
 8002c02:	dc02      	bgt.n	8002c0a <_printf_i+0x122>
 8002c04:	2330      	movs	r3, #48	; 0x30
 8002c06:	3e01      	subs	r6, #1
 8002c08:	7033      	strb	r3, [r6, #0]
 8002c0a:	9b04      	ldr	r3, [sp, #16]
 8002c0c:	1b9b      	subs	r3, r3, r6
 8002c0e:	6123      	str	r3, [r4, #16]
 8002c10:	9b07      	ldr	r3, [sp, #28]
 8002c12:	0021      	movs	r1, r4
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	9805      	ldr	r0, [sp, #20]
 8002c18:	9b06      	ldr	r3, [sp, #24]
 8002c1a:	aa09      	add	r2, sp, #36	; 0x24
 8002c1c:	f7ff fef4 	bl	8002a08 <_printf_common>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	d14c      	bne.n	8002cbe <_printf_i+0x1d6>
 8002c24:	2001      	movs	r0, #1
 8002c26:	4240      	negs	r0, r0
 8002c28:	b00b      	add	sp, #44	; 0x2c
 8002c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c2c:	3145      	adds	r1, #69	; 0x45
 8002c2e:	700a      	strb	r2, [r1, #0]
 8002c30:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <_printf_i+0x21c>)
 8002c32:	9203      	str	r2, [sp, #12]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	6821      	ldr	r1, [r4, #0]
 8002c38:	ca20      	ldmia	r2!, {r5}
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	0608      	lsls	r0, r1, #24
 8002c3e:	d516      	bpl.n	8002c6e <_printf_i+0x186>
 8002c40:	07cb      	lsls	r3, r1, #31
 8002c42:	d502      	bpl.n	8002c4a <_printf_i+0x162>
 8002c44:	2320      	movs	r3, #32
 8002c46:	4319      	orrs	r1, r3
 8002c48:	6021      	str	r1, [r4, #0]
 8002c4a:	2710      	movs	r7, #16
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d1b2      	bne.n	8002bb6 <_printf_i+0xce>
 8002c50:	2320      	movs	r3, #32
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	439a      	bics	r2, r3
 8002c56:	6022      	str	r2, [r4, #0]
 8002c58:	e7ad      	b.n	8002bb6 <_printf_i+0xce>
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	6809      	ldr	r1, [r1, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	0022      	movs	r2, r4
 8002c64:	2178      	movs	r1, #120	; 0x78
 8002c66:	3245      	adds	r2, #69	; 0x45
 8002c68:	7011      	strb	r1, [r2, #0]
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <_printf_i+0x220>)
 8002c6c:	e7e1      	b.n	8002c32 <_printf_i+0x14a>
 8002c6e:	0648      	lsls	r0, r1, #25
 8002c70:	d5e6      	bpl.n	8002c40 <_printf_i+0x158>
 8002c72:	b2ad      	uxth	r5, r5
 8002c74:	e7e4      	b.n	8002c40 <_printf_i+0x158>
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	680d      	ldr	r5, [r1, #0]
 8002c7a:	1d10      	adds	r0, r2, #4
 8002c7c:	6949      	ldr	r1, [r1, #20]
 8002c7e:	6018      	str	r0, [r3, #0]
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	062e      	lsls	r6, r5, #24
 8002c84:	d501      	bpl.n	8002c8a <_printf_i+0x1a2>
 8002c86:	6019      	str	r1, [r3, #0]
 8002c88:	e002      	b.n	8002c90 <_printf_i+0x1a8>
 8002c8a:	066d      	lsls	r5, r5, #25
 8002c8c:	d5fb      	bpl.n	8002c86 <_printf_i+0x19e>
 8002c8e:	8019      	strh	r1, [r3, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	9e04      	ldr	r6, [sp, #16]
 8002c94:	6123      	str	r3, [r4, #16]
 8002c96:	e7bb      	b.n	8002c10 <_printf_i+0x128>
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	1d11      	adds	r1, r2, #4
 8002c9c:	6019      	str	r1, [r3, #0]
 8002c9e:	6816      	ldr	r6, [r2, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	0030      	movs	r0, r6
 8002ca4:	6862      	ldr	r2, [r4, #4]
 8002ca6:	f000 facf 	bl	8003248 <memchr>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d001      	beq.n	8002cb2 <_printf_i+0x1ca>
 8002cae:	1b80      	subs	r0, r0, r6
 8002cb0:	6060      	str	r0, [r4, #4]
 8002cb2:	6863      	ldr	r3, [r4, #4]
 8002cb4:	6123      	str	r3, [r4, #16]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9a04      	ldr	r2, [sp, #16]
 8002cba:	7013      	strb	r3, [r2, #0]
 8002cbc:	e7a8      	b.n	8002c10 <_printf_i+0x128>
 8002cbe:	6923      	ldr	r3, [r4, #16]
 8002cc0:	0032      	movs	r2, r6
 8002cc2:	9906      	ldr	r1, [sp, #24]
 8002cc4:	9805      	ldr	r0, [sp, #20]
 8002cc6:	9d07      	ldr	r5, [sp, #28]
 8002cc8:	47a8      	blx	r5
 8002cca:	1c43      	adds	r3, r0, #1
 8002ccc:	d0aa      	beq.n	8002c24 <_printf_i+0x13c>
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	079b      	lsls	r3, r3, #30
 8002cd2:	d415      	bmi.n	8002d00 <_printf_i+0x218>
 8002cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cd6:	68e0      	ldr	r0, [r4, #12]
 8002cd8:	4298      	cmp	r0, r3
 8002cda:	daa5      	bge.n	8002c28 <_printf_i+0x140>
 8002cdc:	0018      	movs	r0, r3
 8002cde:	e7a3      	b.n	8002c28 <_printf_i+0x140>
 8002ce0:	0022      	movs	r2, r4
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	9906      	ldr	r1, [sp, #24]
 8002ce6:	9805      	ldr	r0, [sp, #20]
 8002ce8:	9e07      	ldr	r6, [sp, #28]
 8002cea:	3219      	adds	r2, #25
 8002cec:	47b0      	blx	r6
 8002cee:	1c43      	adds	r3, r0, #1
 8002cf0:	d098      	beq.n	8002c24 <_printf_i+0x13c>
 8002cf2:	3501      	adds	r5, #1
 8002cf4:	68e3      	ldr	r3, [r4, #12]
 8002cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	42ab      	cmp	r3, r5
 8002cfc:	dcf0      	bgt.n	8002ce0 <_printf_i+0x1f8>
 8002cfe:	e7e9      	b.n	8002cd4 <_printf_i+0x1ec>
 8002d00:	2500      	movs	r5, #0
 8002d02:	e7f7      	b.n	8002cf4 <_printf_i+0x20c>
 8002d04:	080034c1 	.word	0x080034c1
 8002d08:	080034d2 	.word	0x080034d2

08002d0c <_sbrk_r>:
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	b570      	push	{r4, r5, r6, lr}
 8002d10:	4d06      	ldr	r5, [pc, #24]	; (8002d2c <_sbrk_r+0x20>)
 8002d12:	0004      	movs	r4, r0
 8002d14:	0008      	movs	r0, r1
 8002d16:	602b      	str	r3, [r5, #0]
 8002d18:	f7fd fd42 	bl	80007a0 <_sbrk>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d103      	bne.n	8002d28 <_sbrk_r+0x1c>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d000      	beq.n	8002d28 <_sbrk_r+0x1c>
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	2000012c 	.word	0x2000012c

08002d30 <__sread>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	000c      	movs	r4, r1
 8002d34:	250e      	movs	r5, #14
 8002d36:	5f49      	ldrsh	r1, [r1, r5]
 8002d38:	f000 faec 	bl	8003314 <_read_r>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	db03      	blt.n	8002d48 <__sread+0x18>
 8002d40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d42:	181b      	adds	r3, r3, r0
 8002d44:	6563      	str	r3, [r4, #84]	; 0x54
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	4a02      	ldr	r2, [pc, #8]	; (8002d54 <__sread+0x24>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	81a3      	strh	r3, [r4, #12]
 8002d50:	e7f9      	b.n	8002d46 <__sread+0x16>
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	ffffefff 	.word	0xffffefff

08002d58 <__swrite>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	001f      	movs	r7, r3
 8002d5c:	898b      	ldrh	r3, [r1, #12]
 8002d5e:	0005      	movs	r5, r0
 8002d60:	000c      	movs	r4, r1
 8002d62:	0016      	movs	r6, r2
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	d505      	bpl.n	8002d74 <__swrite+0x1c>
 8002d68:	230e      	movs	r3, #14
 8002d6a:	5ec9      	ldrsh	r1, [r1, r3]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2302      	movs	r3, #2
 8002d70:	f000 f9ea 	bl	8003148 <_lseek_r>
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <__swrite+0x34>)
 8002d78:	0028      	movs	r0, r5
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	81a3      	strh	r3, [r4, #12]
 8002d7e:	0032      	movs	r2, r6
 8002d80:	230e      	movs	r3, #14
 8002d82:	5ee1      	ldrsh	r1, [r4, r3]
 8002d84:	003b      	movs	r3, r7
 8002d86:	f000 f875 	bl	8002e74 <_write_r>
 8002d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8c:	ffffefff 	.word	0xffffefff

08002d90 <__sseek>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	000c      	movs	r4, r1
 8002d94:	250e      	movs	r5, #14
 8002d96:	5f49      	ldrsh	r1, [r1, r5]
 8002d98:	f000 f9d6 	bl	8003148 <_lseek_r>
 8002d9c:	89a3      	ldrh	r3, [r4, #12]
 8002d9e:	1c42      	adds	r2, r0, #1
 8002da0:	d103      	bne.n	8002daa <__sseek+0x1a>
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <__sseek+0x28>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	0152      	lsls	r2, r2, #5
 8002dae:	4313      	orrs	r3, r2
 8002db0:	81a3      	strh	r3, [r4, #12]
 8002db2:	6560      	str	r0, [r4, #84]	; 0x54
 8002db4:	e7f8      	b.n	8002da8 <__sseek+0x18>
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	ffffefff 	.word	0xffffefff

08002dbc <__sclose>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	230e      	movs	r3, #14
 8002dc0:	5ec9      	ldrsh	r1, [r1, r3]
 8002dc2:	f000 f8e3 	bl	8002f8c <_close_r>
 8002dc6:	bd10      	pop	{r4, pc}

08002dc8 <__swbuf_r>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	0005      	movs	r5, r0
 8002dcc:	000e      	movs	r6, r1
 8002dce:	0014      	movs	r4, r2
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d004      	beq.n	8002dde <__swbuf_r+0x16>
 8002dd4:	6983      	ldr	r3, [r0, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <__swbuf_r+0x16>
 8002dda:	f7ff fb77 	bl	80024cc <__sinit>
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <__swbuf_r+0xa0>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	d12e      	bne.n	8002e42 <__swbuf_r+0x7a>
 8002de4:	686c      	ldr	r4, [r5, #4]
 8002de6:	69a3      	ldr	r3, [r4, #24]
 8002de8:	60a3      	str	r3, [r4, #8]
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	071b      	lsls	r3, r3, #28
 8002dee:	d532      	bpl.n	8002e56 <__swbuf_r+0x8e>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02f      	beq.n	8002e56 <__swbuf_r+0x8e>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	b2f7      	uxtb	r7, r6
 8002dfc:	1a98      	subs	r0, r3, r2
 8002dfe:	6963      	ldr	r3, [r4, #20]
 8002e00:	b2f6      	uxtb	r6, r6
 8002e02:	4283      	cmp	r3, r0
 8002e04:	dc05      	bgt.n	8002e12 <__swbuf_r+0x4a>
 8002e06:	0021      	movs	r1, r4
 8002e08:	0028      	movs	r0, r5
 8002e0a:	f000 f95d 	bl	80030c8 <_fflush_r>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d127      	bne.n	8002e62 <__swbuf_r+0x9a>
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	3001      	adds	r0, #1
 8002e16:	3b01      	subs	r3, #1
 8002e18:	60a3      	str	r3, [r4, #8]
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	6022      	str	r2, [r4, #0]
 8002e20:	701f      	strb	r7, [r3, #0]
 8002e22:	6963      	ldr	r3, [r4, #20]
 8002e24:	4283      	cmp	r3, r0
 8002e26:	d004      	beq.n	8002e32 <__swbuf_r+0x6a>
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	07db      	lsls	r3, r3, #31
 8002e2c:	d507      	bpl.n	8002e3e <__swbuf_r+0x76>
 8002e2e:	2e0a      	cmp	r6, #10
 8002e30:	d105      	bne.n	8002e3e <__swbuf_r+0x76>
 8002e32:	0021      	movs	r1, r4
 8002e34:	0028      	movs	r0, r5
 8002e36:	f000 f947 	bl	80030c8 <_fflush_r>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d111      	bne.n	8002e62 <__swbuf_r+0x9a>
 8002e3e:	0030      	movs	r0, r6
 8002e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <__swbuf_r+0xa4>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	d101      	bne.n	8002e4c <__swbuf_r+0x84>
 8002e48:	68ac      	ldr	r4, [r5, #8]
 8002e4a:	e7cc      	b.n	8002de6 <__swbuf_r+0x1e>
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <__swbuf_r+0xa8>)
 8002e4e:	429c      	cmp	r4, r3
 8002e50:	d1c9      	bne.n	8002de6 <__swbuf_r+0x1e>
 8002e52:	68ec      	ldr	r4, [r5, #12]
 8002e54:	e7c7      	b.n	8002de6 <__swbuf_r+0x1e>
 8002e56:	0021      	movs	r1, r4
 8002e58:	0028      	movs	r0, r5
 8002e5a:	f000 f81f 	bl	8002e9c <__swsetup_r>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0c9      	beq.n	8002df6 <__swbuf_r+0x2e>
 8002e62:	2601      	movs	r6, #1
 8002e64:	4276      	negs	r6, r6
 8002e66:	e7ea      	b.n	8002e3e <__swbuf_r+0x76>
 8002e68:	08003470 	.word	0x08003470
 8002e6c:	08003490 	.word	0x08003490
 8002e70:	08003450 	.word	0x08003450

08002e74 <_write_r>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	0004      	movs	r4, r0
 8002e78:	0008      	movs	r0, r1
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	2300      	movs	r3, #0
 8002e80:	4d05      	ldr	r5, [pc, #20]	; (8002e98 <_write_r+0x24>)
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	f7fd fd48 	bl	8000918 <_write>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d103      	bne.n	8002e94 <_write_r+0x20>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d000      	beq.n	8002e94 <_write_r+0x20>
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	bd70      	pop	{r4, r5, r6, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	2000012c 	.word	0x2000012c

08002e9c <__swsetup_r>:
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <__swsetup_r+0xe0>)
 8002e9e:	b570      	push	{r4, r5, r6, lr}
 8002ea0:	681d      	ldr	r5, [r3, #0]
 8002ea2:	0006      	movs	r6, r0
 8002ea4:	000c      	movs	r4, r1
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d005      	beq.n	8002eb6 <__swsetup_r+0x1a>
 8002eaa:	69ab      	ldr	r3, [r5, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <__swsetup_r+0x1a>
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	f7ff fb0b 	bl	80024cc <__sinit>
 8002eb6:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <__swsetup_r+0xe4>)
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	d10f      	bne.n	8002edc <__swsetup_r+0x40>
 8002ebc:	686c      	ldr	r4, [r5, #4]
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	5ee2      	ldrsh	r2, [r4, r3]
 8002ec2:	b293      	uxth	r3, r2
 8002ec4:	0711      	lsls	r1, r2, #28
 8002ec6:	d42d      	bmi.n	8002f24 <__swsetup_r+0x88>
 8002ec8:	06d9      	lsls	r1, r3, #27
 8002eca:	d411      	bmi.n	8002ef0 <__swsetup_r+0x54>
 8002ecc:	2309      	movs	r3, #9
 8002ece:	2001      	movs	r0, #1
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	3337      	adds	r3, #55	; 0x37
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	4240      	negs	r0, r0
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <__swsetup_r+0xe8>)
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	d101      	bne.n	8002ee6 <__swsetup_r+0x4a>
 8002ee2:	68ac      	ldr	r4, [r5, #8]
 8002ee4:	e7eb      	b.n	8002ebe <__swsetup_r+0x22>
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <__swsetup_r+0xec>)
 8002ee8:	429c      	cmp	r4, r3
 8002eea:	d1e8      	bne.n	8002ebe <__swsetup_r+0x22>
 8002eec:	68ec      	ldr	r4, [r5, #12]
 8002eee:	e7e6      	b.n	8002ebe <__swsetup_r+0x22>
 8002ef0:	075b      	lsls	r3, r3, #29
 8002ef2:	d513      	bpl.n	8002f1c <__swsetup_r+0x80>
 8002ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ef6:	2900      	cmp	r1, #0
 8002ef8:	d008      	beq.n	8002f0c <__swsetup_r+0x70>
 8002efa:	0023      	movs	r3, r4
 8002efc:	3344      	adds	r3, #68	; 0x44
 8002efe:	4299      	cmp	r1, r3
 8002f00:	d002      	beq.n	8002f08 <__swsetup_r+0x6c>
 8002f02:	0030      	movs	r0, r6
 8002f04:	f000 f9bc 	bl	8003280 <_free_r>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f0c:	2224      	movs	r2, #36	; 0x24
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	4393      	bics	r3, r2
 8002f12:	81a3      	strh	r3, [r4, #12]
 8002f14:	2300      	movs	r3, #0
 8002f16:	6063      	str	r3, [r4, #4]
 8002f18:	6923      	ldr	r3, [r4, #16]
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	89a2      	ldrh	r2, [r4, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	81a3      	strh	r3, [r4, #12]
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <__swsetup_r+0xa6>
 8002f2a:	21a0      	movs	r1, #160	; 0xa0
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	0089      	lsls	r1, r1, #2
 8002f32:	0092      	lsls	r2, r2, #2
 8002f34:	400b      	ands	r3, r1
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <__swsetup_r+0xa6>
 8002f3a:	0021      	movs	r1, r4
 8002f3c:	0030      	movs	r0, r6
 8002f3e:	f000 f93f 	bl	80031c0 <__smakebuf_r>
 8002f42:	220c      	movs	r2, #12
 8002f44:	5ea3      	ldrsh	r3, [r4, r2]
 8002f46:	2001      	movs	r0, #1
 8002f48:	001a      	movs	r2, r3
 8002f4a:	b299      	uxth	r1, r3
 8002f4c:	4002      	ands	r2, r0
 8002f4e:	4203      	tst	r3, r0
 8002f50:	d00f      	beq.n	8002f72 <__swsetup_r+0xd6>
 8002f52:	2200      	movs	r2, #0
 8002f54:	60a2      	str	r2, [r4, #8]
 8002f56:	6962      	ldr	r2, [r4, #20]
 8002f58:	4252      	negs	r2, r2
 8002f5a:	61a2      	str	r2, [r4, #24]
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	6922      	ldr	r2, [r4, #16]
 8002f60:	4282      	cmp	r2, r0
 8002f62:	d1ba      	bne.n	8002eda <__swsetup_r+0x3e>
 8002f64:	060a      	lsls	r2, r1, #24
 8002f66:	d5b8      	bpl.n	8002eda <__swsetup_r+0x3e>
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	81a3      	strh	r3, [r4, #12]
 8002f6e:	3801      	subs	r0, #1
 8002f70:	e7b3      	b.n	8002eda <__swsetup_r+0x3e>
 8002f72:	0788      	lsls	r0, r1, #30
 8002f74:	d400      	bmi.n	8002f78 <__swsetup_r+0xdc>
 8002f76:	6962      	ldr	r2, [r4, #20]
 8002f78:	60a2      	str	r2, [r4, #8]
 8002f7a:	e7ef      	b.n	8002f5c <__swsetup_r+0xc0>
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	08003470 	.word	0x08003470
 8002f84:	08003490 	.word	0x08003490
 8002f88:	08003450 	.word	0x08003450

08002f8c <_close_r>:
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	b570      	push	{r4, r5, r6, lr}
 8002f90:	4d06      	ldr	r5, [pc, #24]	; (8002fac <_close_r+0x20>)
 8002f92:	0004      	movs	r4, r0
 8002f94:	0008      	movs	r0, r1
 8002f96:	602b      	str	r3, [r5, #0]
 8002f98:	f7fd fbd6 	bl	8000748 <_close>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d103      	bne.n	8002fa8 <_close_r+0x1c>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d000      	beq.n	8002fa8 <_close_r+0x1c>
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	2000012c 	.word	0x2000012c

08002fb0 <__sflush_r>:
 8002fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fb2:	898b      	ldrh	r3, [r1, #12]
 8002fb4:	0005      	movs	r5, r0
 8002fb6:	000c      	movs	r4, r1
 8002fb8:	071a      	lsls	r2, r3, #28
 8002fba:	d45f      	bmi.n	800307c <__sflush_r+0xcc>
 8002fbc:	684a      	ldr	r2, [r1, #4]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	dc04      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002fc4:	2a00      	cmp	r2, #0
 8002fc6:	dc01      	bgt.n	8002fcc <__sflush_r+0x1c>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002fce:	2f00      	cmp	r7, #0
 8002fd0:	d0fa      	beq.n	8002fc8 <__sflush_r+0x18>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	682e      	ldr	r6, [r5, #0]
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	001a      	movs	r2, r3
 8002fdc:	0149      	lsls	r1, r1, #5
 8002fde:	400a      	ands	r2, r1
 8002fe0:	420b      	tst	r3, r1
 8002fe2:	d034      	beq.n	800304e <__sflush_r+0x9e>
 8002fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	075b      	lsls	r3, r3, #29
 8002fea:	d506      	bpl.n	8002ffa <__sflush_r+0x4a>
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	1ac0      	subs	r0, r0, r3
 8002ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <__sflush_r+0x4a>
 8002ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ff8:	1ac0      	subs	r0, r0, r3
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	6a21      	ldr	r1, [r4, #32]
 8002ffe:	2300      	movs	r3, #0
 8003000:	0028      	movs	r0, r5
 8003002:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003004:	47b8      	blx	r7
 8003006:	89a1      	ldrh	r1, [r4, #12]
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d106      	bne.n	800301a <__sflush_r+0x6a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	2b1d      	cmp	r3, #29
 8003010:	d831      	bhi.n	8003076 <__sflush_r+0xc6>
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <__sflush_r+0x114>)
 8003014:	40da      	lsrs	r2, r3
 8003016:	07d3      	lsls	r3, r2, #31
 8003018:	d52d      	bpl.n	8003076 <__sflush_r+0xc6>
 800301a:	2300      	movs	r3, #0
 800301c:	6063      	str	r3, [r4, #4]
 800301e:	6923      	ldr	r3, [r4, #16]
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	04cb      	lsls	r3, r1, #19
 8003024:	d505      	bpl.n	8003032 <__sflush_r+0x82>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d102      	bne.n	8003030 <__sflush_r+0x80>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d100      	bne.n	8003032 <__sflush_r+0x82>
 8003030:	6560      	str	r0, [r4, #84]	; 0x54
 8003032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003034:	602e      	str	r6, [r5, #0]
 8003036:	2900      	cmp	r1, #0
 8003038:	d0c6      	beq.n	8002fc8 <__sflush_r+0x18>
 800303a:	0023      	movs	r3, r4
 800303c:	3344      	adds	r3, #68	; 0x44
 800303e:	4299      	cmp	r1, r3
 8003040:	d002      	beq.n	8003048 <__sflush_r+0x98>
 8003042:	0028      	movs	r0, r5
 8003044:	f000 f91c 	bl	8003280 <_free_r>
 8003048:	2000      	movs	r0, #0
 800304a:	6360      	str	r0, [r4, #52]	; 0x34
 800304c:	e7bd      	b.n	8002fca <__sflush_r+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	0028      	movs	r0, r5
 8003052:	6a21      	ldr	r1, [r4, #32]
 8003054:	47b8      	blx	r7
 8003056:	1c43      	adds	r3, r0, #1
 8003058:	d1c5      	bne.n	8002fe6 <__sflush_r+0x36>
 800305a:	682b      	ldr	r3, [r5, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0c2      	beq.n	8002fe6 <__sflush_r+0x36>
 8003060:	2b1d      	cmp	r3, #29
 8003062:	d001      	beq.n	8003068 <__sflush_r+0xb8>
 8003064:	2b16      	cmp	r3, #22
 8003066:	d101      	bne.n	800306c <__sflush_r+0xbc>
 8003068:	602e      	str	r6, [r5, #0]
 800306a:	e7ad      	b.n	8002fc8 <__sflush_r+0x18>
 800306c:	2340      	movs	r3, #64	; 0x40
 800306e:	89a2      	ldrh	r2, [r4, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	e7a9      	b.n	8002fca <__sflush_r+0x1a>
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	430b      	orrs	r3, r1
 800307a:	e7fa      	b.n	8003072 <__sflush_r+0xc2>
 800307c:	690f      	ldr	r7, [r1, #16]
 800307e:	2f00      	cmp	r7, #0
 8003080:	d0a2      	beq.n	8002fc8 <__sflush_r+0x18>
 8003082:	680a      	ldr	r2, [r1, #0]
 8003084:	600f      	str	r7, [r1, #0]
 8003086:	1bd2      	subs	r2, r2, r7
 8003088:	9201      	str	r2, [sp, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	079b      	lsls	r3, r3, #30
 800308e:	d100      	bne.n	8003092 <__sflush_r+0xe2>
 8003090:	694a      	ldr	r2, [r1, #20]
 8003092:	60a2      	str	r2, [r4, #8]
 8003094:	9b01      	ldr	r3, [sp, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	dc00      	bgt.n	800309c <__sflush_r+0xec>
 800309a:	e795      	b.n	8002fc8 <__sflush_r+0x18>
 800309c:	003a      	movs	r2, r7
 800309e:	0028      	movs	r0, r5
 80030a0:	9b01      	ldr	r3, [sp, #4]
 80030a2:	6a21      	ldr	r1, [r4, #32]
 80030a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030a6:	47b0      	blx	r6
 80030a8:	2800      	cmp	r0, #0
 80030aa:	dc06      	bgt.n	80030ba <__sflush_r+0x10a>
 80030ac:	2340      	movs	r3, #64	; 0x40
 80030ae:	2001      	movs	r0, #1
 80030b0:	89a2      	ldrh	r2, [r4, #12]
 80030b2:	4240      	negs	r0, r0
 80030b4:	4313      	orrs	r3, r2
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	e787      	b.n	8002fca <__sflush_r+0x1a>
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	183f      	adds	r7, r7, r0
 80030be:	1a1b      	subs	r3, r3, r0
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	e7e7      	b.n	8003094 <__sflush_r+0xe4>
 80030c4:	20400001 	.word	0x20400001

080030c8 <_fflush_r>:
 80030c8:	690b      	ldr	r3, [r1, #16]
 80030ca:	b570      	push	{r4, r5, r6, lr}
 80030cc:	0005      	movs	r5, r0
 80030ce:	000c      	movs	r4, r1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <_fflush_r+0x12>
 80030d4:	2500      	movs	r5, #0
 80030d6:	0028      	movs	r0, r5
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
 80030da:	2800      	cmp	r0, #0
 80030dc:	d004      	beq.n	80030e8 <_fflush_r+0x20>
 80030de:	6983      	ldr	r3, [r0, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <_fflush_r+0x20>
 80030e4:	f7ff f9f2 	bl	80024cc <__sinit>
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <_fflush_r+0x74>)
 80030ea:	429c      	cmp	r4, r3
 80030ec:	d11b      	bne.n	8003126 <_fflush_r+0x5e>
 80030ee:	686c      	ldr	r4, [r5, #4]
 80030f0:	220c      	movs	r2, #12
 80030f2:	5ea3      	ldrsh	r3, [r4, r2]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ed      	beq.n	80030d4 <_fflush_r+0xc>
 80030f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030fa:	07d2      	lsls	r2, r2, #31
 80030fc:	d404      	bmi.n	8003108 <_fflush_r+0x40>
 80030fe:	059b      	lsls	r3, r3, #22
 8003100:	d402      	bmi.n	8003108 <_fflush_r+0x40>
 8003102:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003104:	f7ff fa83 	bl	800260e <__retarget_lock_acquire_recursive>
 8003108:	0028      	movs	r0, r5
 800310a:	0021      	movs	r1, r4
 800310c:	f7ff ff50 	bl	8002fb0 <__sflush_r>
 8003110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003112:	0005      	movs	r5, r0
 8003114:	07db      	lsls	r3, r3, #31
 8003116:	d4de      	bmi.n	80030d6 <_fflush_r+0xe>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	059b      	lsls	r3, r3, #22
 800311c:	d4db      	bmi.n	80030d6 <_fflush_r+0xe>
 800311e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003120:	f7ff fa76 	bl	8002610 <__retarget_lock_release_recursive>
 8003124:	e7d7      	b.n	80030d6 <_fflush_r+0xe>
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <_fflush_r+0x78>)
 8003128:	429c      	cmp	r4, r3
 800312a:	d101      	bne.n	8003130 <_fflush_r+0x68>
 800312c:	68ac      	ldr	r4, [r5, #8]
 800312e:	e7df      	b.n	80030f0 <_fflush_r+0x28>
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <_fflush_r+0x7c>)
 8003132:	429c      	cmp	r4, r3
 8003134:	d1dc      	bne.n	80030f0 <_fflush_r+0x28>
 8003136:	68ec      	ldr	r4, [r5, #12]
 8003138:	e7da      	b.n	80030f0 <_fflush_r+0x28>
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08003470 	.word	0x08003470
 8003140:	08003490 	.word	0x08003490
 8003144:	08003450 	.word	0x08003450

08003148 <_lseek_r>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	0004      	movs	r4, r0
 800314c:	0008      	movs	r0, r1
 800314e:	0011      	movs	r1, r2
 8003150:	001a      	movs	r2, r3
 8003152:	2300      	movs	r3, #0
 8003154:	4d05      	ldr	r5, [pc, #20]	; (800316c <_lseek_r+0x24>)
 8003156:	602b      	str	r3, [r5, #0]
 8003158:	f7fd fb17 	bl	800078a <_lseek>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d103      	bne.n	8003168 <_lseek_r+0x20>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d000      	beq.n	8003168 <_lseek_r+0x20>
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	bd70      	pop	{r4, r5, r6, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	2000012c 	.word	0x2000012c

08003170 <__swhatbuf_r>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	000e      	movs	r6, r1
 8003174:	001d      	movs	r5, r3
 8003176:	230e      	movs	r3, #14
 8003178:	5ec9      	ldrsh	r1, [r1, r3]
 800317a:	0014      	movs	r4, r2
 800317c:	b096      	sub	sp, #88	; 0x58
 800317e:	2900      	cmp	r1, #0
 8003180:	da08      	bge.n	8003194 <__swhatbuf_r+0x24>
 8003182:	220c      	movs	r2, #12
 8003184:	5eb3      	ldrsh	r3, [r6, r2]
 8003186:	2200      	movs	r2, #0
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	061b      	lsls	r3, r3, #24
 800318c:	d411      	bmi.n	80031b2 <__swhatbuf_r+0x42>
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	e00f      	b.n	80031b4 <__swhatbuf_r+0x44>
 8003194:	466a      	mov	r2, sp
 8003196:	f000 f8d1 	bl	800333c <_fstat_r>
 800319a:	2800      	cmp	r0, #0
 800319c:	dbf1      	blt.n	8003182 <__swhatbuf_r+0x12>
 800319e:	23f0      	movs	r3, #240	; 0xf0
 80031a0:	9901      	ldr	r1, [sp, #4]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	4019      	ands	r1, r3
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <__swhatbuf_r+0x4c>)
 80031a8:	18c9      	adds	r1, r1, r3
 80031aa:	424b      	negs	r3, r1
 80031ac:	4159      	adcs	r1, r3
 80031ae:	6029      	str	r1, [r5, #0]
 80031b0:	e7ed      	b.n	800318e <__swhatbuf_r+0x1e>
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	2000      	movs	r0, #0
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	b016      	add	sp, #88	; 0x58
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	ffffe000 	.word	0xffffe000

080031c0 <__smakebuf_r>:
 80031c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031c2:	2602      	movs	r6, #2
 80031c4:	898b      	ldrh	r3, [r1, #12]
 80031c6:	0005      	movs	r5, r0
 80031c8:	000c      	movs	r4, r1
 80031ca:	4233      	tst	r3, r6
 80031cc:	d006      	beq.n	80031dc <__smakebuf_r+0x1c>
 80031ce:	0023      	movs	r3, r4
 80031d0:	3347      	adds	r3, #71	; 0x47
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	6123      	str	r3, [r4, #16]
 80031d6:	2301      	movs	r3, #1
 80031d8:	6163      	str	r3, [r4, #20]
 80031da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80031dc:	466a      	mov	r2, sp
 80031de:	ab01      	add	r3, sp, #4
 80031e0:	f7ff ffc6 	bl	8003170 <__swhatbuf_r>
 80031e4:	9900      	ldr	r1, [sp, #0]
 80031e6:	0007      	movs	r7, r0
 80031e8:	0028      	movs	r0, r5
 80031ea:	f7ff fa35 	bl	8002658 <_malloc_r>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d108      	bne.n	8003204 <__smakebuf_r+0x44>
 80031f2:	220c      	movs	r2, #12
 80031f4:	5ea3      	ldrsh	r3, [r4, r2]
 80031f6:	059a      	lsls	r2, r3, #22
 80031f8:	d4ef      	bmi.n	80031da <__smakebuf_r+0x1a>
 80031fa:	2203      	movs	r2, #3
 80031fc:	4393      	bics	r3, r2
 80031fe:	431e      	orrs	r6, r3
 8003200:	81a6      	strh	r6, [r4, #12]
 8003202:	e7e4      	b.n	80031ce <__smakebuf_r+0xe>
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <__smakebuf_r+0x84>)
 8003206:	62ab      	str	r3, [r5, #40]	; 0x28
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	89a2      	ldrh	r2, [r4, #12]
 800320c:	6020      	str	r0, [r4, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	81a3      	strh	r3, [r4, #12]
 8003212:	9b00      	ldr	r3, [sp, #0]
 8003214:	6120      	str	r0, [r4, #16]
 8003216:	6163      	str	r3, [r4, #20]
 8003218:	9b01      	ldr	r3, [sp, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <__smakebuf_r+0x7a>
 800321e:	0028      	movs	r0, r5
 8003220:	230e      	movs	r3, #14
 8003222:	5ee1      	ldrsh	r1, [r4, r3]
 8003224:	f000 f89c 	bl	8003360 <_isatty_r>
 8003228:	2800      	cmp	r0, #0
 800322a:	d006      	beq.n	800323a <__smakebuf_r+0x7a>
 800322c:	2203      	movs	r2, #3
 800322e:	89a3      	ldrh	r3, [r4, #12]
 8003230:	4393      	bics	r3, r2
 8003232:	001a      	movs	r2, r3
 8003234:	2301      	movs	r3, #1
 8003236:	4313      	orrs	r3, r2
 8003238:	81a3      	strh	r3, [r4, #12]
 800323a:	89a0      	ldrh	r0, [r4, #12]
 800323c:	4307      	orrs	r7, r0
 800323e:	81a7      	strh	r7, [r4, #12]
 8003240:	e7cb      	b.n	80031da <__smakebuf_r+0x1a>
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	08002451 	.word	0x08002451

08003248 <memchr>:
 8003248:	b2c9      	uxtb	r1, r1
 800324a:	1882      	adds	r2, r0, r2
 800324c:	4290      	cmp	r0, r2
 800324e:	d101      	bne.n	8003254 <memchr+0xc>
 8003250:	2000      	movs	r0, #0
 8003252:	4770      	bx	lr
 8003254:	7803      	ldrb	r3, [r0, #0]
 8003256:	428b      	cmp	r3, r1
 8003258:	d0fb      	beq.n	8003252 <memchr+0xa>
 800325a:	3001      	adds	r0, #1
 800325c:	e7f6      	b.n	800324c <memchr+0x4>
	...

08003260 <__malloc_lock>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4802      	ldr	r0, [pc, #8]	; (800326c <__malloc_lock+0xc>)
 8003264:	f7ff f9d3 	bl	800260e <__retarget_lock_acquire_recursive>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20000120 	.word	0x20000120

08003270 <__malloc_unlock>:
 8003270:	b510      	push	{r4, lr}
 8003272:	4802      	ldr	r0, [pc, #8]	; (800327c <__malloc_unlock+0xc>)
 8003274:	f7ff f9cc 	bl	8002610 <__retarget_lock_release_recursive>
 8003278:	bd10      	pop	{r4, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	20000120 	.word	0x20000120

08003280 <_free_r>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	0005      	movs	r5, r0
 8003284:	2900      	cmp	r1, #0
 8003286:	d010      	beq.n	80032aa <_free_r+0x2a>
 8003288:	1f0c      	subs	r4, r1, #4
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	da00      	bge.n	8003292 <_free_r+0x12>
 8003290:	18e4      	adds	r4, r4, r3
 8003292:	0028      	movs	r0, r5
 8003294:	f7ff ffe4 	bl	8003260 <__malloc_lock>
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <_free_r+0x90>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <_free_r+0x2c>
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	6014      	str	r4, [r2, #0]
 80032a4:	0028      	movs	r0, r5
 80032a6:	f7ff ffe3 	bl	8003270 <__malloc_unlock>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d908      	bls.n	80032c2 <_free_r+0x42>
 80032b0:	6821      	ldr	r1, [r4, #0]
 80032b2:	1860      	adds	r0, r4, r1
 80032b4:	4283      	cmp	r3, r0
 80032b6:	d1f3      	bne.n	80032a0 <_free_r+0x20>
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	1841      	adds	r1, r0, r1
 80032be:	6021      	str	r1, [r4, #0]
 80032c0:	e7ee      	b.n	80032a0 <_free_r+0x20>
 80032c2:	001a      	movs	r2, r3
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <_free_r+0x4e>
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	d9f9      	bls.n	80032c2 <_free_r+0x42>
 80032ce:	6811      	ldr	r1, [r2, #0]
 80032d0:	1850      	adds	r0, r2, r1
 80032d2:	42a0      	cmp	r0, r4
 80032d4:	d10b      	bne.n	80032ee <_free_r+0x6e>
 80032d6:	6820      	ldr	r0, [r4, #0]
 80032d8:	1809      	adds	r1, r1, r0
 80032da:	1850      	adds	r0, r2, r1
 80032dc:	6011      	str	r1, [r2, #0]
 80032de:	4283      	cmp	r3, r0
 80032e0:	d1e0      	bne.n	80032a4 <_free_r+0x24>
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	1841      	adds	r1, r0, r1
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	6053      	str	r3, [r2, #4]
 80032ec:	e7da      	b.n	80032a4 <_free_r+0x24>
 80032ee:	42a0      	cmp	r0, r4
 80032f0:	d902      	bls.n	80032f8 <_free_r+0x78>
 80032f2:	230c      	movs	r3, #12
 80032f4:	602b      	str	r3, [r5, #0]
 80032f6:	e7d5      	b.n	80032a4 <_free_r+0x24>
 80032f8:	6821      	ldr	r1, [r4, #0]
 80032fa:	1860      	adds	r0, r4, r1
 80032fc:	4283      	cmp	r3, r0
 80032fe:	d103      	bne.n	8003308 <_free_r+0x88>
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	1841      	adds	r1, r0, r1
 8003306:	6021      	str	r1, [r4, #0]
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	6054      	str	r4, [r2, #4]
 800330c:	e7ca      	b.n	80032a4 <_free_r+0x24>
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000124 	.word	0x20000124

08003314 <_read_r>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	0004      	movs	r4, r0
 8003318:	0008      	movs	r0, r1
 800331a:	0011      	movs	r1, r2
 800331c:	001a      	movs	r2, r3
 800331e:	2300      	movs	r3, #0
 8003320:	4d05      	ldr	r5, [pc, #20]	; (8003338 <_read_r+0x24>)
 8003322:	602b      	str	r3, [r5, #0]
 8003324:	f7fd f9f3 	bl	800070e <_read>
 8003328:	1c43      	adds	r3, r0, #1
 800332a:	d103      	bne.n	8003334 <_read_r+0x20>
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d000      	beq.n	8003334 <_read_r+0x20>
 8003332:	6023      	str	r3, [r4, #0]
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	2000012c 	.word	0x2000012c

0800333c <_fstat_r>:
 800333c:	2300      	movs	r3, #0
 800333e:	b570      	push	{r4, r5, r6, lr}
 8003340:	4d06      	ldr	r5, [pc, #24]	; (800335c <_fstat_r+0x20>)
 8003342:	0004      	movs	r4, r0
 8003344:	0008      	movs	r0, r1
 8003346:	0011      	movs	r1, r2
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	f7fd fa07 	bl	800075c <_fstat>
 800334e:	1c43      	adds	r3, r0, #1
 8003350:	d103      	bne.n	800335a <_fstat_r+0x1e>
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d000      	beq.n	800335a <_fstat_r+0x1e>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	2000012c 	.word	0x2000012c

08003360 <_isatty_r>:
 8003360:	2300      	movs	r3, #0
 8003362:	b570      	push	{r4, r5, r6, lr}
 8003364:	4d06      	ldr	r5, [pc, #24]	; (8003380 <_isatty_r+0x20>)
 8003366:	0004      	movs	r4, r0
 8003368:	0008      	movs	r0, r1
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	f7fd fa04 	bl	8000778 <_isatty>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d103      	bne.n	800337c <_isatty_r+0x1c>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d000      	beq.n	800337c <_isatty_r+0x1c>
 800337a:	6023      	str	r3, [r4, #0]
 800337c:	bd70      	pop	{r4, r5, r6, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	2000012c 	.word	0x2000012c

08003384 <_init>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr

08003390 <_fini>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr
